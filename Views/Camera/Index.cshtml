@{
    ViewBag.Title = "Camera";
}
@{
    var cameras = ViewBag.Cameras as List<AdminPortalV8.Models.Epatrol.Camera>;
    var locations = ViewBag.Locations as List<AdminPortalV8.Models.Epatrol.Location>;
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

@section Styles {
    <link rel="stylesheet" href="~/Assets/Plugins/datatables.net-bs/css/dataTables.bootstrap.min.css">
    <style>
        /* Custom Loading Modal CSS */
        #loadingModal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: none;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        .custom-modal-content {
            background-color: white;
            padding: 20px;
            margin: 10% auto;
            width: 80%;
            max-width: 600px;
        }

        #cameraVideo{
            display: none;
        }
    </style>
}
@section scripts {
    <script src="~/Assets/Plugins/extended-user-identity/mel.addon.module.js"></script>
    <script src="~/Assets/Plugins/datatables.net/js/jquery.dataTables.min.js"></script>
    <script src="~/Assets/Plugins/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#camera-table').DataTable({
                responsive: true
            });

            function analyzeVideo(video, canvas, cameraName, failedCameras) {
                return new Promise((resolve, reject) => {
                    const context = canvas.getContext('2d');
                    let analyzing = true;

                    // Function to check if the video is ready
                    function checkFrame() {
                        if (!analyzing) {
                            console.log(`Stopping analysis for ${cameraName}`);
                            reject();  // Reject the promise to propagate the error
                            return;
                        }

                        console.log('Video readyState:', video.readyState);  // Debugging readyState

                        // Ensure that video has loaded enough data
                        if (video.readyState >= video.HAVE_ENOUGH_DATA) {
                            canvas.width = video.videoWidth;
                            canvas.height = video.videoHeight;
                            context.drawImage(video, 0, 0, canvas.width, canvas.height);

                            const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                            const pixels = imageData.data;
                            let totalBrightness = 0;
                            let edgeCount = 0;

                            for (let i = 0; i < pixels.length; i += 4) {
                                const r = pixels[i];
                                const g = pixels[i + 1];
                                const b = pixels[i + 2];
                                const brightness = 0.299 * r + 0.587 * g + 0.114 * b;
                                totalBrightness += brightness;

                                // Check edges by comparing with next pixel's brightness
                                if (i < pixels.length - 4) {
                                    const nextBrightness = 0.299 * pixels[i + 4] + 0.587 * pixels[i + 5] + 0.114 * pixels[i + 6];
                                    if (Math.abs(brightness - nextBrightness) > 50) {
                                        edgeCount++;
                                    }
                                }
                            }

                            const avgBrightness = totalBrightness / (pixels.length / 4);
                            if (avgBrightness < 10) {
                                const error = `${cameraName} - Camera view is dark`;
                                failedCameras.push(error);
                                console.log(error);
                                reject(error);  // Reject with the error message
                                return;
                            }

                            const edgeThreshold = 2000;
                            if (edgeCount < edgeThreshold) {
                                const error = `${cameraName} - Camera view is blurry`;
                                failedCameras.push(error);
                                console.log(error);
                                reject(error);  // Reject with the error message
                                return;
                            }

                            resolve();  // Continue if no issues
                        }
                    }

                    checkFrame();

                    return () => {
                        console.log(`Finish analyzing`)
                        analyzing = false;  // Stop the analysis
                    };
                });
            }

            const saveCameraCheckResult = async (cameraId, note) => {
            if (!cameraId) {
                console.error("Error: cameraId is undefined or null!", cameraId);
                return;
            }

            if (!note) {
                console.warn("Warning: note is undefined, setting default message.");
                note = "No additional details.";
            }

            const payload = {
                cameraId: cameraId,
                note: note,
                statusDate: new Date().toISOString()
            };

            console.log("Sending payload:", payload);  // Debugging output

            try {
                const response = await fetch('/Camera/SaveCameraCheckResult', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    console.error('Failed to save camera check result:', await response.text());
                } else {
                    console.log('Camera check result saved successfully.');
                }
            } catch (error) {
                console.error('Error saving camera check result:', error);
            }
        };

            // $('#checkCamera').on('click', async function () {
            //     var cameraList = @Html.Raw(Json.Serialize(ViewBag.Cameras));
            //     console.log(cameraList);

            //     let failedCameras = [];
            //     const video = document.getElementById('cameraVideo');
            //     const canvas = document.createElement('canvas');
            //     const failedCamerasElement = document.getElementById('failedCameras');
            //     const failedCamerasList = document.getElementById('failedCamerasList');
            //     const modal = document.getElementById('loadingModal');
            //     const modalTitle = document.getElementById('modalTitle');
            //     const cancelButton = document.querySelector('#loadingModal .btn-secondary');

            //     modalTitle.textContent = "Checking Camera Stream, Please Wait...";
            //     failedCamerasElement.innerHTML = "";
            //     loadingMessage.style.display = 'block';
            //     failedCamerasList.style.display = 'none';
            //     modal.style.display = 'block';

            //     let hlsInstance = null;
            //     let processCanceled = false;

            //     cancelButton.addEventListener('click', function () {
            //         processCanceled = true;
            //         modal.style.display = 'none';
            //         console.log('Camera checking process canceled by the user.');
            //     });

            //     const checkCamera = async (camera, checkPointId) => {
            //         if (processCanceled) {
            //             throw new Error("Process canceled by the user.");
            //         }

            //         const cameraUrl = camera.url;
            //         const cameraName = camera.name;

            //         console.log(`Checking camera: ${cameraName} (${cameraUrl})`);

            //         video.style.display = 'none';
            //         video.src = ""; Reset the video source

            //         Clear previous HLS instance if any
            //         if (hlsInstance) {
            //             hlsInstance.destroy();
            //             hlsInstance = null;
            //         }

            //         try {
            //             const response = await fetch(`/Camera/CheckCamera?cameraUrl=${encodeURIComponent(cameraUrl)}&checkPointId=${checkPointId}`);

            //             if (!response.ok) {
            //                 If the camera is not connected or returns an error, mark it as not working
            //                 throw new Error(`Camera ${cameraName} failed with response: ${await response.text()}`);
            //             }

            //             HLS playback if supported
            //             if (Hls.isSupported()) {
            //                 hlsInstance = new Hls();
            //                 hlsInstance.loadSource(`/stream/output_camera${checkPointId}.m3u8`);
            //                 hlsInstance.attachMedia(video);

            //                 return new Promise((resolve, reject) => {
            //                     let playbackStarted = false;

            //                     hlsInstance.on(Hls.Events.MANIFEST_PARSED, async () => {
            //                         console.log(`HLS manifest parsed for ${cameraName}.`);
            //                         video.style.display = 'block';
            //                         await video.play().catch((error) => {
            //                             console.error(`Playback error for ${cameraName}:`, error);
            //                         });
            //                         Set up an interval to check readyState every 500ms
            //                         @*const checkInterval = setInterval(() => {
            //                             console.log(`Checking readyState for ${cameraName}: ${video.readyState}`);
            //                             if (video.readyState === 4) { HAVE_ENOUGH_DATA
            //                                 console.log(`readyState is 4 for ${cameraName}. Video is ready.`);
            //                                 clearInterval(checkInterval); Clear the interval
            //                                 resolve(); Resolve the promise to proceed
            //                             }
            //                         }, 500); Check every 500 milliseconds*@
                                    
            //                         playbackStarted = true;
            //                         await analyzeVideo(video, canvas, cameraName, failedCameras).catch((error) => {
            //                             Catch error from analyzeVideo and pass it along
            //                             reject(error);
            //                         });
                                    
            //                         resolve(`${cameraName} is working correctly.`);
            //                     });

            //                     hlsInstance.on(Hls.Events.ERROR, (event, data) => {
            //                         if (!playbackStarted) {
            //                             Handle the case where the HLS stream failed to load
            //                             failedCameras.push(`${cameraName} - Camera is not connected. Please check the power supply or cable connection.`);
            //                             reject(`${cameraName} is not working. Please check the power supply or cable connection.`);
            //                         }
            //                     });
            //                 });
            //             } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            //                 Fallback for browsers that support HLS natively
            //                 video.src = `/stream/output_camera${checkPointId}.m3u8`;
            //                 console.log(`Playing video for ${cameraName} using native HLS support.`);
            //                 video.style.display = 'block';
            //                 await video.play();
            //                 analyzeVideo(video, canvas, cameraName, failedCameras).catch((error) => {
            //                     failedCameras.push(error); Handle analysis errors here
            //                 });
            //                 return `${cameraName} is working correctly.`;
            //             } else {
            //                 throw new Error(`No HLS support for camera ${cameraName}.`);
            //             }
            //         } catch (error) {
            //             console.error(`Error checking camera ${cameraName}:`, error);
            //             failedCameras.push(`${cameraName} - Camera is not connected. Please check the power supply or cable connection.`); Mark the camera as not connected
            //             return `${cameraName} is not working.`; Return the error message
            //         } 
            //         @*finally {
            //             Always try to stop the FFmpeg process after checking the camera
            //             try {
            //                 console.log(`ffmpeg is terminated ${cameraName}`)
            //                 const stopResponse = await fetch(`/Camera/StopCamera`);
            //                 if (!stopResponse.ok) {
            //                     console.error(`Failed to stop FFmpeg for ${cameraName}`);
            //                 }
            //             } catch (stopError) {
            //                 console.error(`Error stopping FFmpeg for ${cameraName}:`, stopError);
            //             }
            //         }*@
            //     };

            //     for (let i = 0; i < cameraList.length; i++) {
            //     for (let i = 0; i < cameraList.length; i++) {
            //         if (processCanceled) {
            //             console.log("Process canceled. Exiting loop.");
            //             break;
            //         }

            //         const camera = cameraList[i];

            //         if (!camera || !camera.cameraId) {
            //             console.error("Error: Camera object or ID is missing!", camera);
            //             continue;
            //         }

            //         const checkPointId = i + 1;
            //         try {
            //             const result = await checkCamera(camera, checkPointId);
            //             console.log(`done analyze we can terminate`);
            //             console.log(result);

            //             await saveCameraCheckResult(camera.cameraId, result);
            //         } catch (error) {
            //             console.error(error);
            //             await saveCameraCheckResult(camera.cameraId, error);
            //         }
            //     }


            //     if (!processCanceled) {
            //         modalTitle.textContent = "Camera Check Complete";
            //         loadingMessage.style.display = 'none';
            //         failedCamerasList.style.display = 'block';

            //         console.log("Failed cameras:", failedCameras);
            //         failedCameras.forEach(cameraName => {
            //             const listItem = document.createElement('li');
            //             listItem.textContent = cameraName;
            //             failedCamerasElement.appendChild(listItem);
            //         });
            //     }
            // });

        });

        //Stop FFMpeg Processes
        window.addEventListener("beforeunload", function (event) {
            navigator.sendBeacon("/Camera/StopStreaming");
        });

        $('#loadingModal').on('hidden.bs.modal', function () {
            // Your custom JavaScript function
            fetch(`/PatrolMap/StopCamera`, {
                method: 'GET'
            })
                .then(response => {
                    if (response.ok) {
                        console.log("FFmpeg process stopped successfully.");
                    } else {
                        console.error("Error stopping FFmpeg process.");
                    }
                })
                .catch(error => console.error("Fetch error:", error));
            
        });
    </script>
    <script>
        document.getElementById("checkAllCamerasButton").addEventListener("click", function () {
                    fetch('/Camera/CheckAllCameras', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error("Network response was not ok.");
                }
            })
            .then(data => {
                alert(data.message);
            })
            .catch(error => {
                console.error("There was a problem with the fetch operation:", error);
            });
        });

        function reset() {
          document.getElementById("filterCameraName").value = "";
          document.getElementById("filterStatus").value = "";
          document.getElementById("filterStartDate").value = "";
          document.getElementById("filterEndDate").value = "";
        }

        document.querySelector(".close").addEventListener("click", reset);

          let currentPage = 1;
          const pageSize = 20;

          function fetchResults(page = 1) {
            // Get filter values
            const cameraName = document.getElementById("filterCameraName").value;
            const status = document.getElementById("filterStatus").value;
            const startDate = document.getElementById("filterStartDate").value;
            const endDate = document.getElementById("filterEndDate").value;

            // Build query parameters
            const queryParams = new URLSearchParams({
              page,
              pageSize,
              cameraName,
              status,
              startDate,
              endDate,
            });

            fetch(`/Camera/GetCameraCheckResults?${queryParams.toString()}`)
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  const resultsContainer = document.getElementById("cameraResultsContainer");
                  const paginationControls = document.getElementById("paginationControls");

                  if (data.results.length > 0) {
                    // Build results table
                    let resultsHtml = '<table class="table table-bordered">';
                    resultsHtml += '<thead><tr><th>Camera ID</th><th>Camera Name</th><th>Status</th><th>Message</th><th>Timestamp</th></tr></thead><tbody>';

                    data.results.forEach(result => {
                        const statusClass =
                            result.status === 'Working'
                                ? 'status-working'
                                : result.status === 'Not Working'
                                ? 'status-not-working'
                                :  result.status === 'Blurry'
                                ? 'status-blurry'
                                :  result.status === 'Dark'
                                ? 'status-dark'
                                : 'status-unknown';


                      resultsHtml += `
                        <tr>
                          <td>${result.cameraId}</td>
                          <td>${result.cameraName}</td>
                          <td class="${statusClass}">${result.status}</td>
                          <td>${result.message}</td>
                          <td>${result.timestamp}</td>
                        </tr>
                      `;
                    });

                    resultsHtml += '</tbody></table>';
                    resultsContainer.innerHTML = resultsHtml;

                    // Build pagination controls
                    const { currentPage, totalPages } = data.pagination;
                    let paginationHtml = '';

                    if (totalPages > 1) {
                      if (currentPage > 1) {
                        paginationHtml += `<button class="btn btn-secondary" onclick="fetchResults(${currentPage - 1})">Previous</button>`;
                      }
                      paginationHtml += ` <span>Page ${currentPage} of ${totalPages}</span> `;
                      if (currentPage < totalPages) {
                        paginationHtml += `<button class="btn btn-secondary" onclick="fetchResults(${currentPage + 1})">Next</button>`;
                      }
                    }

                    paginationControls.innerHTML = paginationHtml;
                  } else {
                    resultsContainer.innerHTML = '<p class="text-center">Don\'t have any result for checking</p>';
                    paginationControls.innerHTML = '';
                  }
                } else {
                  alert("Failed to fetch results. Please try again.");
                }
              })
              .catch(error => console.error('Error fetching results:', error));
          }

        function resetFilter(filterId) {
          // Clear the value of the specified filter input
          document.getElementById(filterId).value = "";

          // Fetch results with the updated filters
          fetchResults(1); // Reset to the first page
        }

          document.getElementById("closeHistoryButton").addEventListener("click", function () {
            reset();
          });

          // Fetch results when the "Apply Filters" button is clicked
          document.getElementById("applyFiltersButton").addEventListener("click", function () {
            currentPage = 1; // Reset to the first page
            fetchResults(currentPage);
          });

          // Fetch initial results when the modal is opened
          document.getElementById("showResultsButton").addEventListener("click", function () {
            fetchResults(currentPage);
            $('#cameraCheckResultsModal').modal('show');
          });
    </script>
    }
    
<!DOCTYPE html>
<html>
<head>
    <title>Camera Page</title>
    <style>
        .container {
            max-width: 100%; /* Ensure the container doesn't exceed the frame */
            overflow: hidden; /* Prevent content overflow */
        }

        .row {
            margin-right: 0; /* Remove unnecessary margins */
            margin-left: 0;
        }

        .input-group {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

            .input-group input, .input-group select {
                flex: 1;
                border-right: none;
            }

            .input-group .btn {
                border-left: none;
                border-radius: 0px;
                background-color: white;
                border: 16px;
                outline-color: transparent;
                outline-style: solid;
                box-shadow: 0.6px 0px 0px 0.8px #D2D6DE;
            }

        #applyFiltersButton {
            margin-top: 10px; /* Add spacing above the button */
        }

        #cameraCheckResults {
            padding: 20px;
            border-radius:2px;
        }

        #cameraCheckResults table {
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
        }

        #cameraCheckResults th, #cameraCheckResults td {
            border: 0.5px solid black;
                padding: 12px;
                text-align: left;
        }

        #cameraCheckResults th {
                background-color: lightblue;
                font-weight: bold;
            }

            .status-blurry {
            color: orange;
            font-weight: bold;
        }

        .status-not-working {
            color: red;
            font-weight: bold;
        }

        .status-working {
            color: green;
            font-weight: bold;
        }

       .status-dark{
            color: orange;
            font-weight: bold;
       }

        .status-unknown {
            color: orange;
            font-weight: bold;
        }
    </style>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <link href="https://vjs.zencdn.net/7.11.4/video-js.css" rel="stylesheet">
    <script src="https://vjs.zencdn.net/7.11.4/video.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
</head>
<body>
    <!-- Main View -->
    <div class="container-fluid" style="width: 100%; margin: auto; border-radius: 10px; background-color: white; padding: 20px;">
        <div>
            <div class="form-group">
                <div class="row align-items-end">
                    <div class="col-md-4">
                        <label>Select Location</label>
                        <select class="form-control" id="searchName" name="LocationName" style="border-radius: 5px; padding-left: 10px; padding-right: 10px;">
                            <option value="">All</option>
                            @foreach (var location in locations.DistinctBy(l => l.Name))
                            {
                                <option value="@location.Name">@location.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label>Select Level</label>
                        <select class="form-control" id="searchLevel" name="LocationLevel" style="border-radius: 5px; padding-left: 10px; padding-right: 10px;">
                            <option value="">All</option>
                        </select>
                    </div>
                    <div class="col-md-4 d-flex justify-content-center align-items-center" style="margin-top: -8px;">
                        <button class="btn btn-primary" id="searchBtn"
                                style="padding: 8px 30px; border: none; border-radius: 5px; cursor: pointer; margin-top: 32px;">
                            Search
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br/>

    <div class="container-fluid" style="width: 100%; margin: auto; border-radius: 10px; background-color: white; padding: 20px;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h3 style="margin: 0;">IP Camera(s)</h3>
            <div>
                <button id="showResultsButton" style="padding: 8px 30px; border: none;
                border-radius: 5px; cursor: pointer; margin-right:5px;" class="btn btn-primary">
                    Show Camera Check Results
                </button>


                <button id="checkAllCamerasButton" style="padding: 8px 30px; border: none;
                border-radius: 5px; cursor: pointer; margin-right:5px;">
                    Check All Cameras
                </button>

                @* <button class="btn btn-primary" id="checkCamera" style="padding: 8px 30px; border: none;  *@
                @* border-radius: 5px; cursor: pointer; margin-right:5px;"> *@
                @*     Check All Camera *@
                @* </button> *@
                <button class="btn btn-primary" data-toggle="modal" data-target="#addCameraModal" style="background-color: #333; color: white;
                padding: 8px 30px; border: none; border-radius: 5px; cursor: pointer; margin-right:5px;">
                    Add New Camera
                </button>
            </div>
        </div>
        <hr />
        <div class="table-responsive">
            <table id="camera-table" style="width: 100%; margin-top: 20px; border-collapse: collapse; background-color: white;">
                <thead>
                    <tr style="background-color: lightgrey;">
                        <th style="text-align: left; padding: 10px;"><input type="checkbox" style="margin-right: 10px;">No.</th>
                        <th style="text-align: left; padding: 10px;">Camera Name</th>
                        <th style="text-align: left; padding: 10px;">Camera URL</th>
                        <th style="text-align: left; padding: 10px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (cameras != null)
                    {
                        @for (int i = 0; i < cameras.Count; i++)
                        {
                            <tr>
                                <td style="padding: 10px;">@(i + 1)</td>
                                <td style="padding: 10px;">@cameras[i].Name</td>
                                <td style="padding: 10px;">@cameras[i].Url</td>
                                <td style="padding: 10px;">
                                    <button type="button" class="btn btn-warning" style="padding: 5px 15px;" data-toggle="modal" data-target="#editCameraModal"
                                            data-id="@cameras[i].CameraId"
                                            data-name="@cameras[i].Name"
                                            data-url="@cameras[i].Url">
                                        Edit
                                    </button>
                                    <button type="button" class="btn btn-danger" style="padding: 5px 15px;" data-toggle="modal" data-target="#deleteCameraModal"
                                            data-id="@cameras[i].CameraId">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" style="text-align: center; padding: 10px;">No Cameras Available</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Camera Modal -->
    <div class="modal fade" id="addCameraModal" tabindex="-1" role="dialog" aria-labelledby="addCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCameraModalLabel">Add Camera</h5>
                </div>
                <form id="addCameraForm" action="@Url.Action("Create", "Camera")" method="post" enctype="multipart/form-data">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="cameraName">Camera Name</label>
                            <input type="text" class="form-control" id="cameraName" name="Name" required />
                        </div>
                        <div class="form-group">
                            <label for="cameraUrl">Camera URL</label>
                            <input type="text" class="form-control" id="cameraUrl" name="Url" required />
                        </div>                     
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Camera Modal -->
    <div class="modal fade" id="editCameraModal" tabindex="-1" role="dialog" aria-labelledby="editCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCameraModalLabel">Edit Camera</h5>
                </div>
                <form id="editCameraForm" action="@Url.Action("Edit", "Camera")" method="post" enctype="multipart/form-data">
                    <input type="hidden" id="editCameraId" name="CameraId" />
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="editCameraName">Camera Name</label>
                            <input type="text" class="form-control" id="editCameraName" name="Name" required />
                        </div>
                        <div class="form-group">
                            <label for="editCameraUrl">Camera URL</label>
                            <input type="text" class="form-control" id="editCameraUrl" name="Url" required />
                        </div>
                        <!-- File input for camera image -->
                        <div class="form-group">
                            <label for="cameraImage">Camera Image</label>
                            <input type="file" class="form-control" id="cameraImage" name="cameraImage" accept="image/*" onchange="previewImage(event)" />
                        </div>
                        <!-- Preview section for image -->
                        <div class="form-group">
                            <label>Image Preview:</label><br />
                            <img id="imagePreview" src="#" alt="Image Preview" style="display: none; max-width: 100%; height: auto;" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @* <script> *@
    @*     // Function to preview image before upload *@
    @*     function previewImage(event) { *@
    @*         var reader = new FileReader(); *@
    @*         reader.onload = function() { *@
    @*             var output = document.getElementById('imagePreview'); *@
    @*             output.style.display = 'block'; // Show the image *@
    @*             output.src = reader.result; // Set the image source to the file *@
    @*         } *@
    @*         reader.readAsDataURL(event.target.files[0]); *@
    @*     } *@
    @* </script> *@


    <!-- Delete Camera Modal -->
    <div class="modal fade" id="deleteCameraModal" tabindex="-1" role="dialog" aria-labelledby="deleteCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteCameraModalLabel">Delete Camera</h5>
                </div>
                <form id="deleteCameraForm" action="@Url.Action("Delete", "Camera")" method="post">
                    <input type="text" id="deleteCameraId" name="CameraId" />
                    <div class="modal-body">
                        <p>Are you sure you want to delete this camera?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <video id="cameraVideo" style="display: none;"></video>

    <!-- Check Camera Structure -->
    <div class="custom-loading-modal" id="loadingModal" tabindex="-1" role="dialog" aria-labelledby="checkCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="custom-modal-content">
                <h4 id="modalTitle"></h4>
                <div id="loadingMessage" style="display: block;"></div>
                <div id="failedCamerasList" style="display: none;">
                    <h5>Failed Cameras:</h5>
                    <ul id="failedCameras"></ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Check Camera Result -->
    <div class="modal fade" id="cameraCheckResultsModal" tabindex="-1" role="dialog" aria-labelledby="resultsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content" id="cameraCheckResults">
                <div class="modal-header">
                    <h5 class="modal-title" id="resultsModalLabel">Camera Check Results</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="container">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input id="filterCameraName" type="text" class="form-control" placeholder="Search by Camera Name" />
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterCameraName')">Reset</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <select id="filterStatus" class="form-control">
                                    <option value="">Filter by Status</option>
                                    <option value="Working">Working</option>
                                    <option value="Not Working">Not Working</option>
                                    <option value="Dark">Dark</option>
                                    <option value="Blurry">Blurry</option>
                                </select>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterStatus')">Reset</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="filterStartDate" class="form-label">Start Date:</label>
                            <div class="input-group">
                                <input id="filterStartDate" type="date" class="form-control" />
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterStartDate')">Reset</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="filterEndDate" class="form-label">End Date:</label>
                            <div class="input-group">
                                <input id="filterEndDate" type="date" class="form-control" />
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterEndDate')">Reset</button>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end" style="text-align: right;">
                            <button id="applyFiltersButton" class="btn btn-primary">Apply Filters</button>
                        </div>
                    </div>
                </div>
                    <div id="cameraResultsContainer"></div>
                    <div id="paginationControls" class="mt-3 text-center"></div>
                <div class="modal-footer">
                    <button id="closeHistoryButton" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    @* <!-- jQuery --> *@
    @* <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> *@
    @* <!-- DataTables CSS --> *@
    @* <link rel="stylesheet" href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css"> *@
    @* <!-- DataTables JS --> *@
    @* <script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script> *@
    <!-- JavaScript -->
    <script>
        $(document).ready(function() { 
            $('#locationLevelDropdown').hide(); // Hide level dropdown initially

            // Event handler for when a location is selected
            $('#searchName').change(function () {
                var selectedSearchName = $(this).val();
                console.log('Selected Location: ', selectedSearchName); // Add this line for debugging

                // If a location is selected, perform AJAX request to get levels
                if (selectedSearchName) {
                    $.ajax({
                        url: '@Url.Action("GetLevels", "Camera")',
                        type: 'GET',
                        data: { name: selectedSearchName }, // Ensure 'name' is the correct key in the data object
                        success: function (data) {
                            // Empty the Level dropdown
                            $('#searchLevel').empty();
                            // Add a default option
                            $('#searchLevel').append('<option value="">Level</option>');
                            // Populate the Level dropdown with new options
                            $.each(data, function (index, level) {
                                $('#searchLevel').append('<option value="' + level + '">' + level + '</option>');
                            });
                        },
                        error: function () {
                            alert('Error fetching levels');
                        }
                    });
                } else {
                    // If no location is selected, clear the Level dropdown
                    $('#searchLevel').empty();
                    $('#searchLevel').append('<option value="All">All</option>');
                }
            });

            $('#searchBtn').click(function () {
                var selectedName = $('#searchName').val();
                var selectedLevel = $('#searchLevel').val();

                // Adjust the data to fetch all cameras when 'All' is selected
                if (selectedName === 'All') {
                    selectedName = '';  // Empty string means no filter on name
                }
                if (selectedLevel === 'All') {
                    selectedLevel = '';  // Empty string means no filter on level
                }

                $.ajax({
                    url: '@Url.Action("GetCamerasByLocationId", "Camera")',
                    type: 'GET',
                    data: {
                        name: selectedName,
                        level: selectedLevel
                    },
                    success: function (data) {
                        var tbody = $('#camera-table tbody');
                        tbody.empty(); // Clear existing rows

                        if (data && data.length > 0) {
                            data.forEach(function (camera, index) {
                                var row = `
                                    <tr>
                                        <td style="padding: 10px;">${index + 1}</td>
                                        <td style="padding: 10px;">${camera.name}</td>
                                        <td style="padding: 10px;">${camera.url}</td>
                                        <td style="padding: 10px;">
                                            <button type="button" class="btn btn-warning" style="padding: 5px 15px;" data-toggle="modal" data-target="#editCameraModal"
                                                    data-id="${camera.cameraId}"
                                                    data-name="${camera.name}"
                                                    data-url="${camera.url}">
                                                Edit
                                            </button>
                                            <button type="button" class="btn btn-danger" style="padding: 5px 15px;" data-toggle="modal" data-target="#deleteCameraModal"
                                                    data-id="${camera.cameraId}">
                                                Delete
                                            </button>
                                        </td>
                                    </tr>
                                `;
                                tbody.append(row);
                            });
                        } else {
                            tbody.append(`
                                <tr>
                                    <td colspan="4" style="text-align: center; padding: 10px;">No Cameras Available</td>
                                </tr>
                            `);
                        }
                    },
                    error: function () {
                        alert('Error fetching camera data');
                    }
                });
            });

        });

        // Handle the Edit Modal population
        $('#editCameraModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var cameraId = button.data('id');
            var cameraName = button.data('name');
            var cameraUrl = button.data('url');
            var cameraImage = button.data('cameraimage'); // Get image data from button

            var modal = $(this);
            modal.find('#editCameraId').val(cameraId);
            modal.find('#editCameraName').val(cameraName);
            modal.find('#editCameraUrl').val(cameraUrl);

            // If camera image exists, display it
            if (cameraImage) {
                modal.find('#imagePreview').attr('src', 'data:image/jpeg;base64,' + cameraImage);
            } else {
                modal.find('#imagePreview').attr('src', '#');
            }
        });

        function previewImage(event) {
            var reader = new FileReader();
            reader.onload = function() {
                var output = document.getElementById('imagePreview');
                output.style.display = 'block'; // Show the new image preview
                output.src = reader.result; // Set the image source to the file
            }
            reader.readAsDataURL(event.target.files[0]);
        }

        // Handle the Delete Modal population
        $('#deleteCameraModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var cameraId = button.data('id');

            var modal = $(this);
            modal.find('#deleteCameraId').val(cameraId);
        });
    </script>
</body>
</html>