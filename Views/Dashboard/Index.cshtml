@{
    ViewBag.Title = "Dashboard";
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:ital@1&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="/css/site.css" />
    <title>CRUD Operations</title>
    <style>
        body {
            background-color: #e0e0e0;
            font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
            padding: 1rem;
            margin: 0;
            overflow-x: auto;
        }

        .container {
            min-width: 1200px;
            max-width: 1500px;
            margin-left: auto;
            margin-right: auto;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            user-select: none;
        }

        .summary-boxes {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .summary-box {
            flex: 1;
            min-width: 250px;
            margin: 0 10px 20px;
            padding: 20px;
            background: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            text-align: center;
        }

            .summary-box h3 {
                margin-top: 0;
                color: #555;
                font-size: 16px;
            }

            .summary-box .count {
                font-size: 28px;
                font-weight: bold;
                margin: 10px 0;
            }

            .summary-box .label {
                font-size: 14px;
                color: #777;
            }

        #snapshotLiveContainer {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 16px;
            margin-top: 1rem;
        }

        .camera-box {
            width: 100%;
            min-width: 0;
            background: #fff;
            padding: 0.75rem;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            text-align: center;
        }

            .camera-box h5 {
                margin-bottom: 0.5rem;
                font-size: 16px;
                color: #333;
                white-space: normal;
            }

            .camera-box video {
                width: 100%;
                height: 140px;
                object-fit: cover;
                border-radius: 10px;
                background-color: black;
            }

                .camera-box video:hover {
                    box-shadow: 0 0 10px rgba(0, 123, 255, 0.6);
                    transform: scale(1.02);
                    transition: 0.2s ease;
                }

        .snapshot {
            background-color: #d3d3d3;
            border-radius: 0.5rem;
            padding: 0.75rem;
            width: 120%;
            box-sizing: border-box;
        }

        .section-heading {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .snapshot-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1rem;
            padding: 0.5rem;
        }

        .tabs {
            display: flex;
            border-bottom: 2px solid #ccc;
            margin-bottom: 12px;
        }

        .tab {
            padding: 10px 20px;
            border: none;
            background: none;
            cursor: pointer;
            font-weight: 600;
            color: #444;
            border-bottom: 3px solid transparent;
        }

            .tab.active {
                color: #000;
                border-color: #007bff;
            }

        .ack-btn, .clear-btn {
            font-weight: 600;
            font-size: 0.75rem;
            padding: 4px 12px;
            border-radius: 20px;
            min-width: 80px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 4px;
            border: none;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .ack-btn {
            background-color: #f97316;
        }

            .ack-btn:hover:not(:disabled) {
                background-color: #ea580c;
            }

        .clear-btn {
            background-color: #22c55e;
        }

            .clear-btn:hover:not(:disabled) {
                background-color: #16a34a;
            }

            .ack-btn:disabled, .clear-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

        table.table {
            background-color: #fff5f5;
            border: 1px solid #fca5a5;
            color: #7f1d1d;
            border-radius: 6px;
            overflow: hidden;
        }

            table.table th {
                background-color: #fecaca;
                color: #7f1d1d;
                font-weight: bold;
            }

            table.table tbody tr:hover {
                background-color: #fee2e2;
                color: #7f1d1d;
                transition: background-color 0.2s ease-in-out;
            }

            table.table td, table.table th {
                border-bottom: 1px solid #fca5a5;
            }

        #cameraSnapshotModal.modal {
            display: block;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100vw;
            height: 100vh;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        #cameraSnapshotModal .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px 30px;
            border-radius: 10px;
            width: 400px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
            animation: popupFade 0.3s ease;
        }

        .building-image {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .building-image:hover {
                transform: scale(1.03);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            }

        .floor-group-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
        }

            .floor-group-content.expanded {
                max-height: 500px;
            }

        .settings-panel {
            transform: translateX(100%);
            transition: transform 0.3s ease-out;
        }

            .settings-panel.open {
                transform: translateX(0);
            }

            .settings-panel.fixed-panel {
                position: fixed;
                top: 60px;
                right: 0;
                width: 450px;
                height: calc(100% - 60px);
                background-color: #fff;
                box-shadow: -2px 0 8px rgba(0,0,0,0.2);
                padding: 24px;
                overflow-y: auto;
                z-index: 1050;
                display: none;
            }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .panel-title {
            font-size: 24px;
            font-weight: bold;
        }

        .panel-close {
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 16px;
        }

            .form-group label {
                display: block;
                font-weight: bold;
                margin-bottom: 4px;
            }

        .selectable-image {
            border: 2px solid transparent;
            cursor: pointer;
            border-radius: 6px;
            transition: 0.2s;
            height: 75px;
        }

            .selectable-image:hover {
                opacity: 0.85;
            }

            .selectable-image.selected {
                border: 2px solid #007bff;
            }

        .button-group button {
            margin-right: 8px;
        }

        .manage-section {
            margin-top: 32px;
        }

        .section-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 12px;
        }
        /* Modal styles */
        .floor-plan-modal {
            /* /* display: none; */
            position: fixed;
            z-index: 1000;
            top: 50%;
            left: 55%;
            transform: translate(-50%, -50%);
            width: 90%;
            /* display: flex; */
            justify-content: center;
            align-items: center;
            border-radius: 8px;
        }

            .floor-plan-modal.active {
                display: flex;
                opacity: 1;
                pointer-events: auto;
            }

        .floor-plan-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .floor-plan-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e40af;
        }

        .close-btn {
            background: transparent;
            border: none;
            cursor: pointer;
            padding: 6px;
            border-radius: 50%;
            transition: background-color 0.2s ease;
        }

            .close-btn:hover {
                background-color: #e5e7eb;
            }

        .floor-plan-container {
            background-color: white;
            border-radius: 0.75rem;
            width: 50%;
            max-width: 90vw;
            max-height: 90vh;
            padding: 1rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.5);
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }

            .floor-plan-container h2 {
                font-size: 1.5rem;
                margin-bottom: 1rem;
                color: #1e40af;
            }

            .floor-plan-container .close-btn {
                position: absolute;
                top: 1rem;
                right: 1rem;
                background: #ccc;
                border-radius: 9999px;
                padding: 0.5rem;
                cursor: pointer;
            }

        .floor-plan-modal.active .floor-plan-container {
            transform: translateY(0);
        }

        #floor-plan-image {
            width: 100%;
            height: auto;
            max-height: 70vh;
            object-fit: contain;
            border: 1px solid #ccc;
            border-radius: 0.5rem;
        }

        .buildings-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(145px, 1fr));
            gap: 1.5rem;
            padding: 1rem;
            width: 100%;
            max-width: 1000px;
            margin: 0 auto;
        }

        .floor-toggle-btn {
            width: 100%;
            background-color: #eee;
            border: none;
            padding: 10px;
            margin: 5px 0;
            cursor: pointer;
            border-radius: 6px;
            text-align: center;
        }

        .floor-buttons-group {
            margin-bottom: 10px;
        }

        .floor-button {
            width: 100%;
            background-color: #f3f4f6;
            border: none;
            border-radius: 6px;
            padding: 10px 30px;
            font-size: 0.9rem;
            color: #1f2937;
            margin: 6px auto;
            text-align: center;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            .floor-button:hover {
                background-color: #e5e7eb;
            }

        .building-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }

        .building-card {
            width: 180px;
            padding: 0.8rem;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: transform 0.2s;
        }

            .building-card .building-image {
                width: 100%;
                height: 120px;
                object-fit: cover;
                border-radius: 6px;
                margin-bottom: 0.5rem;
            }

            .building-card .floor-image {
                width: 100%;
                height: 180px;
                object-fit: cover;
                margin-top: 0.75rem;
                border-radius: 0.5rem;
            }

            .building-card .building-name {
                font-weight: 600;
                font-size: 1.1rem;
                margin-top: 0.75rem;
            }

            .building-card .floor-buttons {
                margin-top: 0.5rem;
            }

                .building-card .floor-buttons button {
                    margin-right: 0.5rem;
                    padding: 0.3rem 0.8rem;
                    font-size: 0.875rem;
                    border: 1px solid #666;
                    border-radius: 4px;
                    background-color: #f0f0f0;
                    cursor: pointer;
                }

        .dropdown-menu {
            max-height: 200px;
            overflow-y: auto;
        }

        .view-cameras {
            max-width: 450px;
            margin: 0.1rem auto;
            padding: 1rem 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.06);
        }

            .view-cameras .section-heading {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 1rem;
            }

            .view-cameras .settings-button {
                font-size: 1.3rem;
                color: #444;
                background: none;
                border: none;
                cursor: pointer;
                transition: color 0.2s;
            }

                .view-cameras .settings-button:hover {
                    color: #1e3a8a;
                }

        .camera-marker {
            position: absolute;
            width: 24px;
            height: 24px;
            background-color: red;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            z-index: 20;
            cursor: pointer;
        }

        #camera-stream-container {
            display: none;
            position: fixed;
            z-index: 9999;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            padding: 0;
            width: 400px;
            height: auto;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

            #camera-stream-container video {
                width: 100%;
                height: auto;
                display: block;
                background-color: white;
            }

            #camera-stream-container .header {
                background: white;
                color: darkblue;
                padding: 6px 12px;
                font-weight: bold;
                display: flex;
                justify-content: space-between;
                align-items: center;
                cursor: move;
                user-select: none;
            }

            #camera-stream-container .close-btn {
                background: transparent;
                border: none;
                color: darkblue;
                font-size: 16px;
                cursor: pointer;
            }

        #camera-stream {
            will-change: transform;
            transform: translateZ(0);
            background-color: black;
            max-height: 280px;
        }

    </style>
</head>
<body>
    @* <div class="container-fluid"> *@
    @*     <!-- Summary Boxes --> *@
    @*     <div class="summary-boxes"> *@
    @*         <div class="summary-box"> *@
    @*             <h3>Total Routes</h3> *@
    @*             <div class="count" id="total-routes">0</div> *@
    @*             <div class="label">All routes in system</div> *@
    @*         </div> *@

    @*         <div class="summary-box"> *@
    @*             <h3>Today's Routes</h3> *@
    @*             <div class="count" id="today-routes">0</div> *@
    @*             <div class="label">Routes scheduled for today</div> *@
    @*         </div> *@

    @*         <div class="summary-box"> *@
    @*             <h3>Completed Routes</h3> *@
    @*             <div class="count" id="completed-routes">0</div> *@
    @*             <div class="label">Patrolled / Today's routes</div> *@
    @*         </div> *@
    @*     </div> *@

    @*     <!-- Main Table --> *@
    @*     <div class="table-responsive"> *@
    @*         <table id="camera-table" class="table table-striped table-bordered"> *@
    @*             <thead> *@
    @*                 <tr> *@
    @*                     <th><input type="checkbox" style="margin-right: 10px;">No.</th> *@
    @*                     <th>Route Name</th> *@
    @*                     <th>Route Type</th> *@
    @*                     <th>CheckPoint Name</th> *@
    @*                     <th>Day</th> *@
    @*                     <th>Schedule Start Time</th> *@
    @*                     <th>Schedule End Time</th> *@
    @*                     <th>Interval(min)</th> *@
    @*                     <th>Image</th> *@
    @*                     <th>Status</th> *@
    @*                     <th>Action</th> *@
    @*                 </tr> *@
    @*             </thead> *@
    @*         </table> *@
    @*     </div> *@
    @* </div> *@

    <div class="container" style="user-select:none;">
        <!-- Top row -->
        <div class="top-row">
            <!-- Camera Statistics -->
            <section aria-label="Camera Statistics" class="card" style="flex:1; min-width:250px; max-width:320px;">
                <div class="section-heading">
                    <div><b>Camera Statistics</b></div>
                    <button aria-label="Settings" class="settings-button">
                        <a href="@Url.Action("Index", "Camera1")">
                            <i class="fas fa-cog" style="color: #333;"></i>
                        </a>
                    </button>
                </div>
                <div class="stats-boxes" style="display:flex; align-items:center; gap:0.5rem; margin-bottom:0.75rem;">
                    <div class="stats-box">
                        <img alt="White security camera icon on gray background" class="icon-img" src="\Images\cameraicon.png" />
                    </div>
                    <div class="stats-box">
                        <div class="stat-text">Total Camera</div>
                        <span class="text-lg font-bold" id="totalCameras">0</span>
                    </div>
                </div>
                <div class="stats-boxes" style="display:flex; align-items:center; gap:0.5rem; margin-bottom:0.75rem;">
                    <div class="stats-box">
                        Cameras Working<br/>
                        <b><span class="text-lg font-bold text-green-600" id="workingCameras" style="color: green;">0</span></b>
                    </div>
                    <div class="stats-box">
                        Cameras Faulty<br/>
                        <b><span class="text-lg font-bold text-red-600" id="faultyCameras" style="color: red">0</span></b>
                    </div>
                </div>
                <div class="stats-boxes" style="display:flex; align-items:center; gap:0.5rem; margin-bottom:0.75rem;">
                    <div class="stats-box">
                        Cameras Blurry<br />
                        <b><span class="text-lg font-bold text-green-600" id="blurryCameras" style="color: red;">0</span></b>
                    </div>
                    <div class="stats-box">
                        Cameras Dark<br />
                        <b><span class="text-lg font-bold text-red-600" id="darkCameras" style="color: red">0</span></b>
                    </div>
                </div>
            </section>
            <!-- AI Models -->
            <section aria-label="AI Models" class="card" style="flex:1; min-width:250px; max-width:320px;">
                <div class="section-heading">
                    <div>AI Models</div>
                    <button aria-label="Settings" class="settings-button">
                        <a href="@Url.Action("Index", "Model")">
                            <i class="fas fa-cog" style="color: #333;"></i>
                        </a>
                    </button>
                </div>
                <div style="display:flex; align-items:center; gap:0.5rem; margin-bottom:0.75rem;">
                    <img alt="White AI icon on gray background" class="icon-img" src="https://storage.googleapis.com/a1aa/image/b8d79678-0e4b-44b6-b4ad-9ab1fb6ecca7.jpg" />
                    <div>
                        <div class="stat-text">Total Models</div>
                        <span class="text-lg font-bold" id="totalModels">0</span>
                    </div>
                </div>
                <div class="stats-box text-center" style="padding:0.5rem;">
                    Models In Use<br />
                    <b><span class="text-lg font-bold text-green-600" id="modelsInUse" style="color: green">0</span></b>
                </div>
            </section>
            <!-- Visitor Statistics -->
            <section aria-label="Visitor Statistics" class="card visitor-stats" style="flex:1; min-width:250px; max-width:480px;">
                <div class="section-heading">
                    <div>Visitor Statistics</div>
                    <button aria-label="Settings" class="settings-button"><i class="fas fa-cog"></i></button>
                </div>
                <div style="display:flex; flex-wrap: wrap; gap: 0.5rem;">
                    <div class="visitor-box">
                        <div class="label visitor-orange">Visitor Car</div>
                        <div class="number-row">
                            50
                            <i class="fas fa-car-side visitor-orange"></i>
                        </div>
                    </div>
                    <div class="visitor-box">
                        <div class="label visitor-blue">Visitor Daily Total</div>
                        <div class="number-row">
                            380
                            <i class="fas fa-users visitor-blue"></i>
                        </div>
                    </div>
                    <div class="visitor-box">
                        <div class="label visitor-green">IN</div>
                        <div class="number-row">
                            150
                            <i class="fas fa-arrow-down visitor-green"></i>
                        </div>
                    </div>
                    <div class="visitor-box">
                        <div class="label visitor-red">OUT</div>
                        <div class="number-row">
                            100
                            <i class="fas fa-arrow-up visitor-red"></i>
                        </div>
                    </div>
                </div>
            </section>
        </div>
        <!-- Middle and bottom left -->
        <div class="middle-bottom-row">
            <div class="left-column">
                <!-- Daily Patrols and Continuous Checks -->
                <div class="patrols-checks-row">
                    <section aria-label="Daily Patrols To Complete" class="card" style="flex:1; min-width:320px; max-width:480px;">
                        <div class="section-heading">
                            <div>Daily Patrols To Complete</div>
                            <button aria-label="Settings" class="settings-button">
                                <a href="@Url.Action("Index", "Route")">
                                    <i class="fas fa-cog" style="color: #333;"></i>
                                </a>
                            </button>
                        </div>
                        <div class="patrols">
                            <div onclick="openPatrolList('Manual')" style="cursor: pointer;">
                                <div class="patrol-box">
                                    Manual Patrols
                                    <div class="my-1" id="manualPatrols">0/0</div>
                                    <div class="patrol-small-text">Patrolled/Today's routes</div>
                                </div>
                            </div>
                            <div onclick="openPatrolList('Auto')" style="cursor: pointer;">
                                <div class="patrol-box">
                                    Automatic Patrols
                                    <div class="my-1" id="autoPatrols">0/0</div>
                                    <div class="patrol-small-text">Patrolled/Today's routes</div>
                                </div>
                            </div>
                        </div>
                    </section>
                    <section aria-label="Continuous Checks" class="card" style="flex:1; min-width:200px; max-width:240px;">
                        <div class="section-heading">
                            <div>Continuous Surveillance</div>
                            <button aria-label="Settings" class="settings-button">
                                <a href="@Url.Action("Index", "FireDetection24hrs")">
                                    <i class="fas fa-cog" style="color: #333;"></i>
                                </a>
                            </button>
                        </div>
                        <div class="continuous-checks-box">
                            Continuous Surveillance
                            <div class="small-text">
                                <span class="text-lg font-bold text-green-600" id="camerasConfigured">0</span>
                                Cameras Configured
                            </div>
                            <div class="small-text">
                                <span class="text-lg font-bold text-green-600" id="continuousDetectionActive">0</span>
                                Continuous Detection Active
                            </div>
                        </div>
                    </section>
                </div>
                <!-- Events and Visitor Trend -->
                <div class="events-trend-row">
                    <section aria-label="Events" class="events" style="flex:1; min-width:320px; max-width:480px;">
                        <div class="events-title">Events</div>
                        <div>
                            <div class="event-item">
                                <div class="event-date blue">28</div>
                                <div class="event-desc">
                                    Monday, 2023 <span class="blue">CERTIS AND OCSRM VISIT</span>
                                </div>
                            </div>
                            <div class="event-item">
                                <div class="event-date orange">07</div>
                                <div class="event-desc">
                                    Wednesday, 2023 <span class="orange">FIRE SYSTEM MAINTENANCE</span>
                                </div>
                            </div>
                            <div class="event-item">
                                <div class="event-date blue">10</div>
                                <div class="event-desc">
                                    Tuesday, 2023 <span class="blue">FIRE DRILL INSPECTION</span>
                                </div>
                            </div>
                        </div>
                    </section>
                    <section aria-label="Visitor Trend" class="visitor-trend" style="flex:1; min-width:320px; max-width:480px;">
                        <img alt="Bar chart showing visitor trend with green bars and data labels" src="https://storage.googleapis.com/a1aa/image/1e96a19b-4d74-4495-4638-efb6735082e5.jpg" />
                    </section>
                </div>
                <!-- Device Alarm Table -->
                <section aria-label="Notification Snapshot" class="card" style="margin-top: 1rem;">
                    <div class="section-heading">
                        <div>Latest System Notifications</div>
                    </div>

                    <!-- Tabs for switching -->
                    <div class="tabs" role="tablist" style="margin-top: 1rem;">
                        <button class="tab active" role="tab" aria-selected="true" aria-controls="tab-active" id="tab-active-btn" tabindex="0">Active</button>
                        <button class="tab" role="tab" aria-selected="false" aria-controls="tab-past" id="tab-past-btn" tabindex="-1">Past</button>
                    </div>

                    <!-- Active Notifications Table -->
                    <section id="tab-active" role="tabpanel" aria-labelledby="tab-active-btn">
                        <div style="max-height: 300px; overflow-y: auto;">
                            <table id="active-noti-table" class="table table-bordered table-striped" style="margin-bottom: 0; width: 100%;">
                                <thead class="thead-dark" style="position: sticky; top: 0; background-color: #ccc;">
                                    <tr>
                                        <th>Device</th>
                                        <th>Type</th>
                                        <th>Location</th>
                                        <th>Time</th>
                                        <th>Note</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows dynamically inserted -->
                                </tbody>
                            </table>
                        </div>
                    </section>

                    <!-- Past Notifications Table -->
                    <section id="tab-past" role="tabpanel" aria-labelledby="tab-past-btn" hidden>
                        <div style="max-height: 300px; overflow-y: auto;">
                            <table id="past-noti-table" class="table table-bordered table-striped" style="margin-bottom: 0; width: 100%;">
                                <thead class="thead-dark" style="position: sticky; top: 0; background-color: #ccc;">
                                    <tr>
                                        <th>Device</th>
                                        <th>Type</th>
                                        <th>Location</th>
                                        <th>Time</th>
                                        <th>Note</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Rows dynamically inserted -->
                                </tbody>
                            </table>
                        </div>
                    </section>

                    <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#notificationTypeModal" style="margin-top: 1rem;">
                        See All Notification
                    </button>
                </section>
            </div>
            <!-- Right column -->
            <div class="right-column">
                <!-- Key Location -->
                <section aria-label="Snapshot" class="snapshot">
                    <div class="section-heading">
                        <div class="title"><i class="fas fa-camera"></i><span>Key Location</span></div>
                        <button aria-label="Settings" class="settings-button" id="cameraSnapshotBtn"><i class="fas fa-cog"></i></button>
                    </div>
                    <div class="snapshot-grid" id="snapshotLiveContainer">
                    </div>
                </section>

                <!-- Modal -->
                <div id="cameraSnapshotModal" class="modal" style="display:none;">
                    <div class="modal-content">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <h4>Select Cameras (1–6)</h4>
                            <button type="button" id="closeSnapshotModalBtn" style="background: none; border: none; font-size: 20px; cursor: pointer;">
                                &times;
                            </button>
                        </div>
                        <div id="cameraListContainer"></div>
                        <button id="applySnapshotSelection">Apply</button>
                    </div>
                </div>

                <!-- View Cameras -->
                <!-- BEGIN: View Cameras Section -->
                <section aria-label="View Cameras" class="view-cameras">
                    <div class="section-heading">
                        <div class="title"><i class="fas fa-video"></i><span>View Cameras</span></div>
                        <button id="settings-button" aria-label="Settings" class="settings-button">
                            <i class="fas fa-cog"></i>
                        </button>
                    </div>
                    <div id="buildings-container" class="buildings-container grid gap-6 mb-12">
                        <!-- Dynamic buildings here -->
                    </div>
                </section>
                <!-- END: View Cameras Section -->
                <!-- BEGIN: Floor Plan Modal -->
                <div id="floor-plan-modal" class="floor-plan-modal" style="display:none;">
                    <div class="floor-plan-container" id="floorPlanContainer" style="position: relative;">
                        <div class="floor-plan-header">
                            <h2 id="floor-plan-title" class="floor-plan-title"></h2>
                            <button onclick="hideFloorPlan()" class="close-btn">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div id="floor-plan-wrapper" style="position: relative; width: 100%; max-height: 70vh;" class="border-2 border-gray-200 rounded-lg overflow-hidden">
                            <img id="floor-plan-image" src="" alt="Floor Plan" class="w-full h-auto">
                            <div id="no-floor-plan-message" style="display: none;"></div>
                        </div>
                    </div>
                </div>
                <div id="camera-stream-container" class="camera-popup" data-checkpoint-id="">
                    <div class="header">
                        <span class="title">Live Stream</span>
                        <button class="close-btn" onclick="closeStream()">×</button>
                    </div>
                    <video id="camera-stream" autoplay muted controls></video>
                </div>
                <!-- END: Floor Plan Modal -->
                <!-- BEGIN: Settings Panel -->
                <div id="settings-panel" class="settings-panel fixed-panel">
                    <div class="panel-header">
                        <h2 class="panel-title">Settings</h2>
                        <button onclick="toggleSettings()" class="panel-close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>

                    <div class="form-section">
                        <h3 class="form-title" id="settings-form-title">Add New Building</h3>
                        <input type="hidden" id="edit-building-index" value="-1">
                        <input type="hidden" id="location-id" />
                        <div class="form-group">
                            <label for="building-name">Building Name</label>
                            <select id="building-name"></select>
                        </div>
                        <div class="form-group">
                            <label for="building-floor">Number of Floors</label>
                              <input type="text" id="floor-count" readonly />
                        </div>
                        <div class="form-group">
                            <label>Building Image</label>
                            <div id="image-options" style="display: flex; gap: 20px;">
                                <div style="text-align: center;">
                                    <img src="/images/building.jpg" class="selectable-image" data-value="building.jpg" alt="Building" width="80">
                                    <div>Building</div>
                                </div>
                                <div style="text-align: center;">
                                    <img src="/images/parking.jpg" class="selectable-image" data-value="parking.jpg" alt="Car Park" width="80">
                                    <div>Car Park</div>
                                </div>
                                <div style="text-align: center;">
                                    <img src="/images/perimeter.jpg" class="selectable-image" data-value="perimeter.jpg" alt="Perimeter" width="80">
                                    <div>Perimeter</div>
                                </div>
                                <div style="text-align: center;">
                                    <img src="/images/basement.jpg" class="selectable-image" data-value="basement.jpg" alt="Basement" width="80">
                                    <div>Basement</div>
                                </div>
                            </div>
                            <input type="hidden" id="selected-image" name="selectedImage">
                        </div>
                        <div class="button-group">
                            <button id="save-building-btn" onclick="saveBuilding()">Save</button>
                            <button onclick="cancelEdit()" id="cancel-button" class="hidden">Cancel</button>
                        </div>
                    </div>

                    <div class="manage-section">
                        <h3 class="section-title">Manage Buildings</h3>
                        <div id="buildings-list" class="building-grid"></div>
                    </div>
                </div>
                <!-- END: Settings Panel -->
                <!-- BEGIN: Delete Building Panel -->
                <div class="modal fade" id="deleteBuildingModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Delete Building</h5>
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to delete <strong id="deleteBuildingName"></strong>?
                                <input type="hidden" id="deleteBuildingId">
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-danger" onclick="deleteBuilding()">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- END: Delete Building Panel -->
                <!-- BEGIN: Edit Building Panel -->
                <div class="modal fade" id="editBuildingModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg" role="document">
                        <div class="modal-content">

                            <div class="modal-header">
                                <h5 class="modal-title" id="editModalLabel">Edit Building Image</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span>&times;</span>
                                </button>
                            </div>

                            <div class="modal-body">
                                <h5>Select a New Image</h5>
                                <div style="display: flex; gap: 20px; margin-top: 10px;">
                                    <div style="text-align: center;">
                                        <img src="/images/building.jpg" class="selectable-image" data-value="building.jpg" alt="Building" width="80">
                                        <div>Building</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <img src="/images/parking.jpg" class="selectable-image" data-value="parking.jpg" alt="Car Park" width="80">
                                        <div>Car Park</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <img src="/images/perimeter.jpg" class="selectable-image" data-value="perimeter.jpg" alt="Perimeter" width="80">
                                        <div>Perimeter</div>
                                    </div>
                                    <div style="text-align: center;">
                                        <img src="/images/basement.jpg" class="selectable-image" data-value="basement.jpg" alt="Basement" width="80">
                                        <div>Basement</div>
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button class="btn btn-secondary btn-sm" id="saveSelectImage">Save</button>
                                <button class="btn btn-secondary btn-sm" id="cancelSelectImage">Cancel</button>
                            </div>

                        </div>
                    </div>
                </div>
                <!-- END: Edit Building Panel -->
            </div>
        </div>
    </div>

    <!-- Patrol Modal -->
    <div class="modal fade" id="patrolListModal" tabindex="-1" role="dialog" aria-labelledby="patrolListModalLabel" aria-modal="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable" role="document" style="width: 85vw; height: 105vh;">
            <div class="modal-content" style="height: 100%; width:100%">
                <div class="modal-header">
                    <h5 class="modal-title" id="patrolListModalLabel">Patrol List - <span id="modalType"></span></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="overflow: auto;">
                    <div class="table-responsive" style="max-height: 100%; overflow: auto;">
                        <table id="modal-camera-table" class="table table-striped table-bordered nowrap w-100">
                            <thead>
                                <tr>
                                    <th>No.</th>
                                    <th>Route Name</th>
                                    <th>Route Type</th>
                                    <th>CheckPoint Name</th>
                                    <th>Day</th>
                                    <th>Schedule Start Time</th>
                                    <th>Schedule End Time</th>
                                    <th>Interval(min)</th>
                                    <th>Image</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification Type Modal -->
    <div class="modal fade" id="notificationTypeModal" tabindex="-1" role="dialog" aria-labelledby="notificationTypeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-md" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificationTypeModalLabel">Select Notification Type</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <div class="btn-group-vertical w-100">
                        <button onclick="openNotificationModal('health')" class="btn btn-secondary">Schedule Check Camera</button>
                        <button onclick="openNotificationModal('status')" class="btn btn-secondary">All Camera Notifications</button>
                        <button onclick="openNotificationModal('fire')" class="btn btn-secondary">Continuous Surveillance</button>
                        <button onclick="openNotificationModal('patrol')" class="btn btn-secondary">Patrol Notifications</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notificationModalLabel">Notification List</h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Device</th>
                                <th>Alarm</th>
                                <th>Location</th>
                                <th>Date / Time</th>
                            </tr>
                        </thead>
                        <tbody id="notificationModalBody">
                            <tr><td colspan="4">Loading...</td></tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    @section scripts {
        <script src="~/Assets/Plugins/extended-user-identity/mel.addon.module.js"></script>
        <script src="~/Assets/Plugins/datatables.net/js/jquery.dataTables.min.js"></script>
        <script src="~/Assets/Plugins/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
        <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
        @* <script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
        <script src="https:cdn.datatables.net/1.10.25/js/dataTables.bootstrap4.min.js"></script> *@
        <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

        <script>
            $(document).ready(function () {
                sendHello();
                bindDatatable();
                bindButtonEvents();
                loadSummaryData(); // Load summary box data
                loadAllLocations();

                $('#camera-table').on('click', '.toggle-autopatrol', function () {
                    const routeId = $(this).data('route-id');
                    const enable = $(this).data('enable');

                    $.post('/Dashboard/ToggleAutoPatrol', { routeId: routeId, enable: enable }, function (response) {
                        if (response.success) {
                            showToast(response.message, 'green');
                            $('#camera-table').DataTable().ajax.reload();
                            loadSummaryData(); // Refresh summary data after change
                        } else {
                            showToast(response.message, 'red');
                        }
                    }).fail(function () {
                        showToast('Failed to toggle AutoPatrol.', 'red');
                    });
                });

                $.get("@Url.Action("GetDashboardStats", "Dashboard")", function (res) {
                    if (res.error) return;

                    $('#totalCameras').text(res.totalCameras);
                    $('#workingCameras').text(res.workingCameras);
                    $('#faultyCameras').text(res.faultyCameras);
                    $('#blurryCameras').text(res.blurryCameras);
                    $('#darkCameras').text(res.darkCameras);
                    $('#totalModels').text(res.totalModels);
                    $('#modelsInUse').text(res.modelsInUse);
                    $('#manualPatrols').text(`${res.manualCompleted}/${res.manualToday}`);
                    $('#autoPatrols').text(`${res.autoCompleted}/${res.autoToday}`);
                    $('#camerasConfigured').text(res.camerasConfigured);
                    $('#continuousDetectionActive').text(res.continuousDetectionActive);
                });

                $('#modal-camera-table').on('click', '.toggle-autopatrol', function () {
                    const routeId = $(this).data('route-id');
                    const enable = $(this).data('enable');

                    $.post('/Dashboard/ToggleAutoPatrol', { routeId, enable }, function (response) {
                        if (response.success) {
                            showToast(response.message, 'green');

                            $('#modal-camera-table').DataTable().ajax.reload();  // refresh modal table
                            $('#camera-table').DataTable().ajax.reload();        // refresh main table
                            loadSummaryData();                                   // refresh summary
                        } else {
                            showToast(response.message, 'red');
                        }
                    }).fail(function () {
                        showToast('Failed to toggle AutoPatrol.', 'red');
                    });
                });

                // $('#seeAllNotificationBtn').click(function () {
                //     $('#notificationTypeModal').removeClass('hidden').addClass('flex');
                // });

                let selectedCameraList = [];

                $('#cameraSnapshotBtn').click(function () {
                    $('#cameraSnapshotModal').show();
                    loadCameraOptions();
                });

                $('#closeSnapshotModalBtn').click(function () {
                    $('#cameraSnapshotModal').hide();
                });

                $('#applySnapshotSelection').click(function () {
                    const checked = $('.cameraCheckbox:checked');
                    const count = checked.length;

                    if (count < 1 || count > 6) {
                        alert("Please select 1–6 cameras.");
                        return;
                    }

                    // Continue saving the selected camera IDs...
                    const selectedIds = checked.map(function () {
                        return $(this).data('id');
                    }).get();

                    // POST to save selection
                    $.ajax({
                        url: '/Dashboard/UpdateCameraSelection',
                        method: 'POST',
                        contentType: 'application/json',           
                        data: JSON.stringify({                     
                            selectedCheckPoints: selectedIds
                        }),
                        success: function (res) {
                            if (res.success) {
                                $('#cameraSnapshotModal').hide();
                                location.reload();
                            } else {
                                alert("Failed to save camera selections.");
                            }
                        },
                        error: function (xhr, status, err) {
                            console.error("AJAX error:", err);
                            alert("AJAX error: " + xhr.status);
                        }
                    });
                });
                
                loadActiveNotifications();
                
                $('#tab-active-btn').on('click', function () {
                    $('.tab').removeClass('active').attr('aria-selected', 'false');
                    $(this).addClass('active').attr('aria-selected', 'true');

                    $('#tab-active').show();
                    $('#tab-past').hide();
                });

                $('#tab-past-btn').on('click', function () {
                    $('.tab').removeClass('active').attr('aria-selected', 'false');
                    $(this).addClass('active').attr('aria-selected', 'true');

                    $('#tab-active').hide();
                    $('#tab-past').show();

                    // Trigger load only when tab is clicked
                    loadPastNotifications();
                });

                // Ensure default tab visible on load
                $('#tab-active').show();
                $('#tab-past').hide();
                

                $.get('/Dashboard/GetSavedCameraSelections', function (res) {
                    if (res.success) {
                        const selectedCameras = [];

                        $.get('/Dashboard/GetCameraStreams', function (cameraRes) {
                            if (cameraRes.success) {
                                res.checkpoints.forEach(id => {
                                    const cam = cameraRes.data.find(c => c.checkPointId === id);
                                    if (cam) {
                                        selectedCameras.push({
                                            cameraUrl: cam.url,
                                            checkPointId: cam.checkPointId,
                                            name: cam.name
                                        });
                                    }
                                });

                                const ids = selectedCameras.map(c => c.checkPointId);
                                onCameraSelectionChanged(ids);
                                showLiveSnapshots(selectedCameras);
                            }
                        });
                    }
                });

                let buildings = [];

                loadBuildings();
                loadBuildingsList();

                $('#settings-button').on('click', function () {
                    $('#settings-panel').addClass('open');
                    $('#settings-panel').show();
                    loadBuildingDropdowns();
                });

                $('#settings-panel .fa-times').on('click', function () {
                    $('#settings-panel').removeClass('open');
                });

                $('#close-settings').on('click', function () {
                    $('#settings-panel').removeClass('open');
                    $('#settings-panel').hide();
                });

                $('#close-floor-plan').on('click', function () {
                    $('#floor-plan-modal').removeClass('active');
                    $('#floor-plan-modal').hide();
                });

                $('#building-image').on('change', function (e) {
                    const fileName = e.target.files[0] ? e.target.files[0].name : 'No image selected';
                    $('#image-name').text(fileName);
                });

                $('#building-name').on('change', function () {
                    const selectedBuilding = $(this).val();
                    const floors = buildingMaxFloorMap[selectedBuilding] || '';
                    $('#floor-count').val(floors);
                    if (selectedBuilding === '__add__') {
                        window.location.href = '/Location';
                        return;
                    }

                    let maxFloor = buildingMaxFloorMap[selectedBuilding] || '';
                    $('#floor-count').val(maxFloor);

                    const selectedLoc = allLocations.find(loc => loc.buildingName.trim() === selectedBuilding.trim());
                                if (selectedLoc) {
                        $('#location-id').val(selectedLoc.locationId);
                    } else {
                        $('#location-id').val('');
                    }
                });

                let selectedImage = null;

                $('.selectable-image').on('click', function () {
                    $('.selectable-image').removeClass('selected');
                    $(this).addClass('selected');
                    selectedImage = $(this).data('value');
                });

                $('#save-building-btn').on('click', function () {
                    const buildingName = $('#building-name').val();
                    const floorCount = $('#floor-count').val();
                    const locationId = $('#location-id').val();

                    if (!buildingName || !floorCount || !locationId) {
                        alert('Please fill in all fields.');
                        return;
                    }

                    $.ajax({
                        url: '/Dashboard/SaveBuilding',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            BuildingName: buildingName,
                            FloorCount: parseInt(floorCount),
                            Image: selectedImage,
                            locationId: parseInt(locationId)
                        }),
                        success: function () {
                            alert('Building saved!');
                            location.reload();
                        },
                        error: function () {
                            alert('Failed to save building.');
                        }
                    });
                });

                $(document).on('click', '.floor-button', function () {
                    const buildingName = $(this).data('building');
                    const floor = $(this).data('floor');
                    showFloorPlan(buildingName, floor);
                });

                $("#camera-stream-container").draggable({
                    handle: ".header",
                    containment: "window"
                });

                $(document).on('click', '.setting-btn', function () {
                    const buildingId = $(this).data('building-id');

                    window.location.href = `/FloorMap?buildingId=${buildingId}`;
                });


                $(document).on('click', '.edit-location-btn', function () {
                    const buildingName = $(this).data('building-name');
                    window.location.href = `/Location?buildingName=${encodeURIComponent(buildingName)}`;                
                });
            });

            let allLocations = [];

            function loadAllLocations() {
                $.get('/Dashboard/GetAllLocations', function (locations) {
                    allLocations = locations;
                });
            }


            function loadBuildingDropdowns() {
                $.ajax({
                    url: '/Dashboard/GetAvailableBuildingLocations',
                    method: 'GET',
                    success: function (data) {
                        if (!data.success) {
                            alert('Failed to load location data.');
                            return;
                        }

                        const locations = data.locations;
                        const usedLocationNames = new Set(data.usedLocationNames.map(name => name.trim())); // 改这里

                        let buildingSet = new Set();
                        buildingMaxFloorMap = {};

                        locations.forEach(loc => {
                            let building = loc.building?.trim();
                            let floor = loc.floor?.trim();

                            if (!building || !floor) return;

                            if (usedLocationNames.has(building)) return;  // ✅ 改这里：检查 building name 而不是 locationId

                            buildingSet.add(building);

                            if (!buildingMaxFloorMap[building]) {
                                buildingMaxFloorMap[building] = 1;
                            } else {
                                buildingMaxFloorMap[building]++;
                            }
                        });

                        $('#building-name').empty().append('<option disabled selected>Select Building</option>');

                        Array.from(buildingSet).forEach(name => {
                            $('#building-name').append(`<option value="${name}">${name}</option>`);
                        });

                        $('#building-name').append('<option value="__add__">➕ Add More Building</option>');
                        $('#floor-count').val('');
                    },
                    error: function () {
                        alert('Failed to load building/floor data.');
                    }
                });
            }

            function loadActiveNotifications() {
                $.get('/Dashboard/GetActiveNotifications', function (res) {
                    const tbody = $('#active-noti-table tbody');
                    tbody.empty();
                    if (res.success && res.data.length) {
                        res.data.forEach(noti => {
                            tbody.append(renderNotificationRow(noti));
                        });
                    }
                });
            }

            function loadPastNotifications() {
                $.get('/Dashboard/GetPastNotifications', function (res) {
                    const tbody = $('#past-noti-table tbody');
                    tbody.empty();
                    if (res.success && res.data.length) {
                        res.data.forEach(noti => {
                            tbody.append(`
                                <tr>
                                    <td>${noti.device}</td>
                                    <td>${noti.type}</td>
                                    <td>${noti.location}</td>
                                    <td>${formatDateTime(noti.timestamp)}</td>
                                    <td>${noti.note}</td>
                                </tr>
                            `);
                        });
                    }
                });
            }

            function renderNotificationRow(noti) {
                const disableAck = noti.acknowledge ? "disabled" : "";
                const disableClear = !noti.acknowledge || noti.clear ? "disabled" : "";

                return `
                <tr>
                    <td>${noti.device}</td>
                    <td>${noti.type}</td>
                    <td>${noti.location}</td>
                    <td>${formatDateTime(noti.timestamp)}</td>
                    <td>${noti.note}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="ack-btn" data-id="${noti.id}" ${disableAck}>
                                <span class="material-icons">check_circle</span> Acknowledge
                            </button>
                            <button class="clear-btn" data-id="${noti.id}" ${disableClear}>
                                <span class="material-icons">clear</span> Clear
                            </button>
                        </div>
                    </td>
                </tr>`;
            }

            $(document).on('click', '.ack-btn', function () {
                const id = $(this).data('id');
                $.post('/Dashboard/AcknowledgeNotification', { id }, function (res) {
                    if (res.success) {
                        loadActiveNotifications();
                    }
                });
            });

            $(document).on('click', '.clear-btn', function () {
                const id = $(this).data('id');
                $.post('/Dashboard/ClearNotification', { id }, function (res) {
                    if (res.success) {
                        loadActiveNotifications();
                        loadPastNotifications();
                    }
                });
            });

            function stopAllKeepalive(){
              try {
                navigator.sendBeacon('/Dashboard/StopAllCameras', new Blob([JSON.stringify({})], {type:'application/json'}));
              } catch(e) {
                fetch('/Dashboard/StopAllCameras', {method:'POST', keepalive:true, headers:{'Content-Type':'application/json'}, body:'{}'});
              }
            }
            window.addEventListener('beforeunload', stopAllKeepalive);
            window.addEventListener('pagehide', stopAllKeepalive);
            document.addEventListener('visibilitychange', () => {
              if (document.visibilityState === 'hidden') stopAllKeepalive();
            });

            window.addEventListener("beforeunload", function (event) {
                navigator.sendBeacon("/Dashboard/StopStreaming");
            });


            function loadCameraOptions() {
                $.get('/Dashboard/GetCameraStreams', function (res) {
                    if (res.success) {
                        const cameras = res.data;
                        const container = $('#cameraListContainer');
                        container.empty();

                        // Step 2: Get saved camera selections
                        $.get('/Dashboard/GetSavedCameraSelections', function (savedRes) {
                            const savedCheckpoints = savedRes.success ? savedRes.checkpoints : [];

                            cameras.forEach(function (camera) {
                                const isChecked = savedCheckpoints.includes(camera.checkPointId);
                                const checkbox = `
                                    <label style="display:block; margin-bottom: 8px;">
                                        <input type="checkbox" class="cameraCheckbox"
                                            data-id="${camera.checkPointId}"
                                            data-url="${camera.url}"
                                            ${isChecked ? 'checked' : ''}>
                                        ${camera.name}
                                    </label>
                                `;
                                container.append(checkbox);
                            });
                        });
                    }
                });
            }

            function toggleCameraSelection(checkPointId, selected) {
              fetch('/Dashboard/UpdateCameraSelection', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ checkPointId, selected })
              });
            }


            function showLiveSnapshots(cameras) {
                console.log("Rendering snapshots for:", cameras);

                let html = '';
                let tasks = cameras.map(cam => {
                    return new Promise((resolve) => {
                        const id = cam.checkPointId;

                        $.get('/Dashboard/StartCamera', {
                            cameraUrl: cam.cameraUrl,
                            checkPointId: id
                        }, () => {
                            const videoId = `video-${id}`;
                            html += `
                                <div class="camera-box">
                                    <h5>${cam.name}</h5>
                                    <video id="${videoId}" controls autoplay muted width="100%">
                                        <source src="/stream/output_camera${id}.m3u8" type="application/x-mpegURL">
                                        Your browser does not support the video tag.
                                    </video>
                                </div>`;
                            resolve();
                        });
                    });
                });

                Promise.all(tasks).then(() => {
                    $('#snapshotLiveContainer').html(html);

                    cameras.forEach(cam => {
                        const video = document.getElementById(`video-${cam.checkPointId}`);
                        const m3u8Url = `/stream/output_camera${cam.checkPointId}.m3u8`;

                        if (Hls.isSupported()) {
                            const hls = new Hls();
                            hls.loadSource(m3u8Url);
                            hls.attachMedia(video);
                        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                            video.src = m3u8Url;
                        } else {
                            console.warn("This browser cannot play HLS.");
                        }
                    });
                });
               
            }

            function sendHello() {
                console.log("Hello World!");
            }

            function loadSummaryData() {
                $.get('/Dashboard/GetRouteSummary', function(data) {
                    if (data) {
                        $('#total-routes').text(data.totalRoutes);
                        $('#today-routes').text(data.todayRoutes);
                        $('#completed-routes').text(data.completedRoutes + '/' + data.todayRoutes);
                    }
                }).fail(function() {
                    console.error('Failed to load summary data');
                });
            }

            const patrolTimers = {};

            function bindDatatable() {
                $('#camera-table').DataTable({
                    "processing": true,
                    "serverSide": true,
                    "searching": true,
                    "ajax": {
                        "url": "/Dashboard/GetRouteData",
                        "type": "GET",
                        "data": function (d) {
                            d.search = d.search.value;
                            d.orderColumn = d.order[0].column;
                            d.orderDir = d.order[0].dir;
                        },
                        "dataSrc": "data"
                    },
                    "order": [[6, 'desc']],
                    "columnDefs": [
                        { "orderable": false, "targets": 0 }
                    ],
                    "language": {
                        "emptyTable": "No record found.",
                        "processing": '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i> Loading...'
                    },
                    "columns": [
                        {
                            "data": null,
                            "render": function (data, type, row, meta) {
                                return meta.row + meta.settings._iDisplayStart + 1;
                            },
                            "orderable": false
                        },
                        { "data": "routeName", "autoWidth": true },
                        { "data": "patrolTypeName", "autoWidth": true },
                        {
                            "data": "checkPointName",
                            "autoWidth": true,
                            "render": function (data) {
                                return data.map(cp => cp.name).join(', ');
                            }
                        },
                        { "data": "day", "autoWidth": true },
                        { "data": "scheduleStartTime", "autoWidth": true },
                        { "data": "scheduleEndTime", "autoWidth": true },
                        { "data": "interval", "autoWidth": true },
                        {
                            "data": "image",
                            "autoWidth": true,
                            "render": function (data) {
                                if (data) {
                                    return `<div style="display: flex; justify-content: center; align-items: center; width: 60px; height: 60px; margin:auto;">
                                                <img src="data:image/jpeg;base64,${data}" style="object-fit: contain; max-width: 100%; max-height: 100%;"/>
                                            </div>`;
                                } else {
                                    return '<span>No Image</span>';
                                }
                            }
                        },
                        {
                            "data": "patrolStatus",
                            "autoWidth": true,
                            "render": function (data) {
                                if (data === "Patrolled") {
                                    return '<span class="badge" style="background-color: green; color: white;">' + data + '</span>';
                                } else {
                                    return '<span class="badge" style="background-color: red; color: white;">' + data + '</span>';
                                }
                            }
                        },
                        {
                            "data": null,
                            "orderable": false,
                            "render": function (data, type, row) {
                                const cameraIp = row.checkPointName.find(cp => cp.cameraIp)?.cameraIp || '';
                                if (row.patrolTypeName === "Manual") {
                                                return `<a href="/Dashboard/StartPatrolling?routeId=${row.routeId}" class="btn btn-primary" style="padding: 5px 15px; width: 150px; margin-right: 15px !important; margin-left: 0px !important;" onclick="handleButtonClick(this)">
                                                <i class="fas fa-play"></i> Start
                                            </a>`;
                                } else {
                                    const toggleLabel = row.autoPatrol ? "Stop" : "Start";
                                    const toggleClass = row.autoPatrol ? "btn-danger" : "btn-primary";
                                    return `<button
                                                class="btn ${toggleClass} toggle-autopatrol"
                                                style="padding: 5px 15px; width: 150px; margin-right: 15px !important; margin-left: 0px !important;"
                                                data-route-id="${row.routeId}"
                                                data-enable="${!row.autoPatrol}">
                                                <i class="fas fa-play"></i> ${toggleLabel}
                                            </button>`;
                                }
                            }
                        }
                    ]
                });
            }

            function bindButtonEvents() {
                $('#camera-table').on('click', '.start-patrol', function () {
                    var routeId = $(this).data('route-id');
                    var cameraIp = $(this).data('camera-ip');
                    var duration = parseInt($(this).data('duration'));
                    var button = this;

                    if (isNaN(duration) || duration <= 0) {
                        showToast('Invalid duration for this route', 'red');
                        return;
                    }

                    handleStartPatrol(button);
                    startPatrolCycle(routeId, cameraIp, duration);
                });

                $('#camera-table').on('click', '.stop-patrol', function () {
                    var routeId = $(this).data('route-id');
                    var cameraIp = $(this).data('camera-ip');
                    stopPatrolCycle(routeId, cameraIp);
                });
            }

            function startPatrolCycle(routeId, cameraIp, duration) {
                const durationMs = duration * 60 * 1000;

                $.ajax({
                    url: '/Dashboard/StartAutoPatrol',
                    type: 'POST',
                    data: { routeId: routeId, cameraIp: cameraIp },
                    success: function (response) {
                        if (response.success) {
                            showToast(response.message, 'green');
                            $('#camera-table').DataTable().ajax.reload();

                            const stopTimer = setTimeout(() => {
                                $.ajax({
                                    url: '/Dashboard/StopAutoPatrol',
                                    type: 'POST',
                                    data: { routeId: routeId, cameraIp: cameraIp },
                                    success: function (stopResponse) {
                                        if (stopResponse.success) {
                                            showToast(stopResponse.message, 'green');
                                            $('#camera-table').DataTable().ajax.reload();

                                            const startTimer = setTimeout(() => {
                                                startPatrolCycle(routeId, cameraIp, duration);
                                            }, durationMs);

                                            patrolTimers[routeId] = { startTimer };
                                        } else {
                                            showToast(stopResponse.message, 'red');
                                        }
                                    },
                                    error: function () {
                                        showToast('Error stopping auto patrol', 'red');
                                    }
                                });
                            }, durationMs);

                            patrolTimers[routeId] = { stopTimer };
                        } else {
                            showToast(response.message, 'red');
                            const button = $(`button[data-route-id="${routeId}"].start-patrol`);
                            button.removeClass('disabled');
                            button.css('pointer-events', 'auto');
                            button.html('<i class="fas fa-play"></i> Start Auto Patrol');
                        }
                    },
                    error: function (xhr) {
                        var errorMessage = xhr.responseJSON?.message || 'Error starting auto patrol';
                        showToast(errorMessage, 'red');
                        const button = $(`button[data-route-id="${routeId}"].start-patrol`);
                        button.removeClass('disabled');
                        button.css('pointer-events', 'auto');
                        button.html('<i class="fas fa-play"></i> Start Auto Patrol');
                    }
                });
            }

            function stopPatrolCycle(routeId, cameraIp) {
                if (patrolTimers[routeId]) {
                    clearTimeout(patrolTimers[routeId].stopTimer);
                    clearTimeout(patrolTimers[routeId].startTimer);
                    delete patrolTimers[routeId];
                }

                $.ajax({
                    url: '/Dashboard/StopAutoPatrol',
                    type: 'POST',
                    data: { routeId: routeId, cameraIp: cameraIp },
                    success: function (response) {
                        if (response.success) {
                            showToast(response.message, 'green');
                            $('#camera-table').DataTable().ajax.reload();
                        } else {
                            showToast(response.message, 'red');
                        }
                    },
                    error: function () {
                        showToast('Error stopping auto patrol', 'red');
                    }
                });
            }

            function handleStartPatrol(button) {
                button.classList.add('disabled');
                button.style.pointerEvents = "none";
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Starting...';
            }

            function handleButtonClick(button) {
                button.classList.add('disabled');
                button.style.pointerEvents = "none";
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Please wait...';
            }

            function showToast(message, bgColor) {
                let toast = document.createElement("div");
                Object.assign(toast.style, {
                    position: "fixed", bottom: "20px", left: "50%", transform: "translateX(-50%)",
                    background: bgColor, color: "white", padding: "10px 20px", borderRadius: "5px",
                    fontSize: "14px", zIndex: "1000", opacity: "0.9", transition: "opacity 0.5s"
                });
                toast.innerText = message;
                document.body.appendChild(toast);
                setTimeout(() => (toast.style.opacity = "0"), 1000);
                setTimeout(() => document.body.removeChild(toast), 1500);
            }

            function startCameraStream(cameraId) {
                $.get('/Dashboard/GetAllCameraStreams', function (res) {
                    if (res.success && Array.isArray(res.data)) {

                        const cam = res.data.find(x =>
                            x.cameraId == cameraId
                        );

                        if (cam && cam.url) {
                            const id = cameraId;

                            $.get('/Dashboard/StartCamera', {
                                cameraUrl: cam.url,
                                checkPointId: id
                            }, () => {
                                const container = document.getElementById('camera-stream-container');
                                const video = document.getElementById('camera-stream');

                                $('#camera-stream-container').attr('data-checkpoint-id', cameraId);
                                container.style.display = 'block';

                                const streamUrl = `/stream/output_camera${id}.m3u8`;

                                video.style.display = 'block';
                                video.style.left = '600px';
                                video.style.top = '100px';
                                video.style.width = '400px';
                                video.style.height = '250px';

                                if (window.hls) {
                                    window.hls.destroy();
                                    window.hls = null;
                                }

                                if (Hls.isSupported()) {
                                    const hls = new Hls();
                                    let playbackStarted = false;

                                    hls.loadSource(streamUrl);
                                    hls.attachMedia(video);

                                    hls.on(Hls.Events.MANIFEST_PARSED, function () {
                                        video.play();
                                        playbackStarted = true;
                                    });

                                    hls.on(Hls.Events.ERROR, function (event, data) {
                                        console.error("HLS error:", data);
                                        if (!playbackStarted && data.details === 'manifestLoadError') {
                                            alert("Camera is not connected. Please check the power supply or cable connection.");
                                        }
                                    });

                                    window.hls = hls;
                                } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                                    video.src = streamUrl;
                                    video.play().catch(err => {
                                        console.error("Native HLS playback error:", err);
                                        alert("Camera is not connected. Please check the power supply or cable connection.");
                                    });
                                } else {
                                    alert("This browser does not support HLS.");
                                }
                            });
                            //         const hls = new Hls();
                            //         hls.loadSource(streamUrl);
                            //         hls.attachMedia(video);
                            //         window.hls = hls;
                            //     } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                            //         video.src = streamUrl;
                            //     } else {
                            //         alert("This browser does not support HLS.");
                            //     }
                            // });
                        } else {
                            alert("Camera URL not found for this checkpoint.");
                        }
                    } else {
                        alert("Failed to get camera streams.");
                    }
                });
            }

            function openPatrolList(type) {
                $('#modalType').text(type);

                // Destroy old instance if exists to prevent duplication
                if ($.fn.DataTable.isDataTable('#modal-camera-table')) {
                    $('#modal-camera-table').DataTable().destroy();
                }

                $('#modal-camera-table').DataTable({
                    processing: true,
                    serverSide: true,
                    searching: true,
                    ajax: {
                        url: "/Dashboard/GetRouteData",
                        type: "GET",
                        data: function (d) {
                            d.search = d.search.value;
                            d.orderColumn = d.order[0].column;
                            d.orderDir = d.order[0].dir;
                        },
                        dataSrc: function (json) {
                            // Filter based on patrol type
                            json.data = json.data.filter(item => item.patrolTypeName === type);
                            return json.data;
                        }
                    },
                    order: [[6, 'desc']],
                    columnDefs: [
                        { orderable: false, targets: 0 }
                    ],
                    columns: [
                        {
                            data: null,
                            render: function (data, type, row, meta) {
                                return meta.row + 1;
                            }
                        },
                        { data: "routeName" },
                        { data: "patrolTypeName" },
                        {
                            data: "checkPointName",
                            render: function (data) {
                                return data.map(cp => cp.name).join(', ');
                            }
                        },
                        { data: "day" },
                        { data: "scheduleStartTime" },
                        { data: "scheduleEndTime" },
                        { data: "interval" },
                        {
                            data: "image",
                            render: function (data) {
                                return data
                                    ? `<img src="data:image/jpeg;base64,${data}" style="object-fit:contain; width:60px; height:60px;" />`
                                    : 'No Image';
                            }
                        },
                        {
                            data: "patrolStatus",
                            render: function (data) {
                                const badgeClass = data === "Patrolled" ? "badge-success" : "badge-danger";
                                return `<span class="badge ${badgeClass}" style="padding: 6px 12px;">${data}</span>`;
                            }
                        },
                        {
                            data: null,
                            render: function (row) {
                                const cameraIp = row.checkPointName.find(cp => cp.cameraIp)?.cameraIp || '';
                                if (row.patrolTypeName === "Manual") {
                                    return `<a href="/Dashboard/StartPatrolling?routeId=${row.routeId}" class="btn btn-primary btn-sm dashboard-start-patrol" data-route-id="${row.routeId}">
                                                <i class="fas fa-play"></i> Start
                                            </a>`;
                                } else {
                                    const label = row.autoPatrol ? "Stop" : "Start";
                                    const btnClass = row.autoPatrol ? "btn-danger" : "btn-primary";
                                    return `<button class="btn ${btnClass} btn-sm toggle-autopatrol"
                                                data-route-id="${row.routeId}"
                                                data-enable="${!row.autoPatrol}">
                                                <i class="fas fa-play"></i> ${label}
                                            </button>`;
                                }
                            }
                        }
                    ]
                });

                $('#patrolListModal').modal('show');
            }

            // Intercept manual Start in the dashboard patrol list to validate coordinates
            $(document).on('click', '#modal-camera-table a.dashboard-start-patrol', function (e) {
                e.preventDefault();
                const anchor = this;
                const routeId = $(this).data('route-id');

                $.get('/Patrol/ValidateRouteCoordinates', { routeId: routeId })
                    .done(function (res) {
                        if (res && res.requiresCoordinateSetup) {
                            // Reuse Patrol page modal logic if available; else fallback confirm
                            if (typeof showCoordinateAlert === 'function') {
                                showCoordinateAlert(res.routeId, res.routeName);
                            } else {
                                const msg = `This route ('${res.routeName || ''}') still has checkpoint(s) without camera coordinates. Open Patrol Map to set them?`;
                                if (window.confirm(msg)) {
                                    window.location.href = `/PatrolMap/Index?routeId=${routeId}`;
                                }
                            }
                        } else {
                            window.location.href = anchor.href;
                        }
                    })
                    .fail(function () {
                        alert('Failed to validate route coordinates.');
                    });
            });

            function filterNotification(type) {
                $('#notificationTypeModal').modal('hide');

                switch (type) {
                    case 'all':
                        // Fetch and render all types
                        loadNotificationTable();
                        break;
                    case 'health':
                        loadNotificationTable("Camera Health");
                        break;
                    case 'patrol':
                        loadNotificationTable("Patrol");
                        break;
                    case 'fire':
                        loadNotificationTable("Continuous Surveillance");
                        break;
                    default:
                        loadNotificationTable();
                }
            }

            function openNotificationModal(type) {
                let url = '';
                switch (type) {
                    case 'health': url = '/Dashboard/GetCameraHealthNotifications'; break;
                    case 'status': url = '/Dashboard/GetCameraStatusNotifications'; break;
                    case 'fire': url = '/Dashboard/GetFireNotifications'; break;
                    case 'patrol': url = '/Dashboard/GetPatrolNotifications'; break;
                    default: return;
                }

                $('#notificationModalLabel').text(type === 'health' ? 'Camera Health Notifications'
                    : type === 'status' ? 'Camera Status Notifications'
                    : type === 'fire' ? 'Continuous Surveillance'
                    : 'Patrol Notifications');

                $.get(url, function (data) {
                    const tbody = $('#notificationModalBody');
                    tbody.empty();

                    if (!data || data.length === 0) {
                        tbody.append('<tr><td colspan="4">No records found.</td></tr>');
                        return;
                    }

                    data.forEach(item => {
                        const row = `<tr>
                            <td>${item.device}</td>
                            <td style="color:red;">${
                                item.type === 'Camera Status' ? 'Not working'
                                : item.type === 'Camera Health' ? 'Not working'
                                : item.type === 'Patrol' ? 'Warning'
                                : 'Abnormal detected'
                            }</td>
                            <td>${item.location ?? '-'}</td>
                            <td>${new Date(item.timestamp).toLocaleString()}</td>
                        </tr>`;
                        tbody.append(row);
                    });
                });

                $('#notificationModal').modal('show');
            }

            function renderNotificationRow(noti) {
                const disableAck = noti.acknowledge ? "disabled" : "";
                const disableClear = !noti.acknowledge || noti.clear ? "disabled" : "";

                return `
                <tr>
                    <td>${noti.device}</td>
                    <td>${noti.type}</td>
                    <td>${noti.location}</td>
                    <td>${formatDateTime(noti.timestamp)}</td>
                    <td>${noti.note}</td>
                    <td>
                        <button class="ack-btn" data-id="${noti.id}" ${disableAck}>Acknowledge</button>
                        <button class="clear-btn" data-id="${noti.id}" ${disableClear}>Clear</button>
                    </td>
                </tr>`;
            }

            function formatDateTime(datetimeStr) {
                const date = new Date(datetimeStr);
                return date.toLocaleString('en-GB', {
                    day: '2-digit',
                    month: 'short',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: true
                });
            }

            function onCameraSelectionChanged(selectedIds) {
                $.ajax({
                    url: '/Dashboard/SaveCameraSelections',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(selectedIds),
                    success: function (res) {
                        if (res.success) {
                            console.log('Camera selections saved.');
                        }
                    }
                });
            }

            function toggleSettings() {
                const panel = document.getElementById('settings-panel');
                panel.style.display = panel.style.display === 'block' ? 'none' : 'block';
            }

            function hideFloorPlan() {
                $('#floor-plan-modal').hide().removeClass('active');
                $('.camera-marker').remove();
            }

            function cancelEdit() {
                resetForm();
            }

            function saveBuilding() {
                const buildingName = document.getElementById("building-name").value;
                const floorCount = parseInt(document.getElementById("building-floor").value);

                if (!buildingName || !floorCount || !selectedImage) {
                    alert("Please select building, floor and image.");
                    return;
                }

                const model = {
                    BuildingName: buildingName,
                    FloorCount: floorCount,
                    Image: selectedImage
                };

                fetch('/Dashboard/SaveBuilding', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(model)
                })
                .then(res => {
                    if (res.ok) {
                        alert("Saved successfully!");
                    } else {
                        alert("Save failed.");
                    }
                })
                .catch(err => {
                    console.error("Error saving:", err);
                    alert("Error occurred.");
                });
            }

            function loadBuildings() {
                $.ajax({
                    url: '/Dashboard/GetAllBuildings',
                    method: 'GET',
                    success: function (buildings) {
                        const container = $('#buildings-container');
                        container.empty();

                        buildings.forEach(b => {
                            const floors = b.floors || [];
                            let floorRangesHtml = '';

                            if (floors.length <= 10) {
                                let floorsHtml = '';
                                floors.forEach(floor => {
                                    floorsHtml += `<button class="floor-button" data-building="${b.name}" data-floor="${floor}">Floor ${floor}</button>`;
                                });
                                floorRangesHtml = `<div class="floor-group">${floorsHtml}</div>`;
                            } else {
                                const batchSize = 10;
                                const totalBatches = Math.ceil(floors.length / batchSize);

                                for (let batch = 0; batch < totalBatches; batch++) {
                                    const startIndex = batch * batchSize;
                                    const endIndex = Math.min(startIndex + batchSize, floors.length);
                                    const groupId = `${b.name.replace(/\s+/g, '-')}-group-${batch}`;

                                    let floorsHtml = '';
                                    for (let i = startIndex; i < endIndex; i++) {
                                        const floor = floors[i];
                                        floorsHtml += `<button class="floor-button" data-building="${b.name}" data-floor="${floor}">Floor ${floor}</button>`;
                                    }

                                    floorRangesHtml += `
                                        <div class="floor-range-group">
                                            <button class="toggle-floor-range" data-target="${groupId}">
                                                <strong>Floor ${floors[startIndex]} - ${floors[endIndex - 1]}</strong>
                                            </button>
                                            <div class="floor-group" id="${groupId}" style="display: none;">
                                                ${floorsHtml}
                                            </div>
                                        </div>
                                    `;
                                }
                            }

                            const card = `
                                <div class="building-card" style="position: relative;">
                                    <img src="/images/${b.imageName}" class="building-image" alt="${b.name}">
                                    <button class="setting-btn" data-building-id="${b.id}" style="
                                        position: absolute;
                                        top: 8px;
                                        right: 8px;
                                        background: transparent;
                                        border: none;
                                        cursor: pointer;
                                        font-size: 18px;
                                    ">
                                    <i class="fas fa-cog" style="color: #333;"></i>
                                    </button>
                                    <h4>${b.name}</h4>
                                    <div class="floor-list">${floorRangesHtml}</div>
                                </div>
                            `;

                            container.append(card);
                        });

                        // Toggle group
                        $('.toggle-floor-range').on('click', function () {
                            const target = $(this).data('target');
                            $(`#${target}`).slideToggle();
                        });

                        $('.setting-btn').on('click', function () {
                            const buildingId = $(this).data('building-id');
                            window.location.href = '/FloorMap?buildingId=' + buildingId;
                        });
                    },
                    error: function () {
                        alert("Failed to load buildings.");
                    }
                });
            }


            function loadBuildingsList() {
                $.get('/Dashboard/GetAllBuildingslist', function (buildings) {
                    const container = $('#buildings-list');
                    container.empty();

                    buildings.forEach(b => {
                        const card = $(`
                            <div class="building-card" data-id="${b.id}">
                                <img src="/images/${b.imageName}" class="building-image" alt="${b.name}">
                                <div class="building-info">
                                    <h5>${b.name}</h5>
                                    <p>Total Floors: ${b.numberOfFloors}</p>
                                    <div class="building-actions">
                                        <button class="btn btn-sm btn-outline-primary edit-location-btn"
                                                data-building-name="${b.name}">
                                            Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-primary" onclick="editBuildingImage(${b.id})">Change Image</button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteBuilding(${b.id})">Delete</button>
                                    </div>
                                </div>
                            </div>
                        `);
                        container.append(card);
                    });
                });
            }


            function editBuildingImage(buildingId) {
                const modal = $('#editBuildingModal');
                let selectedImage = null;

                modal.modal('show');

                modal.find('.selectable-image').off('click').on('click', function () {
                    modal.find('.selectable-image').css('border', 'none');
                    $(this).css('border', '3px solid #007bff');
                    selectedImage = $(this).data('value');
                });

                modal.find('#saveSelectImage').off('click').on('click', function () {
                    if (!selectedImage) {
                        alert('Please select an image first.');
                        return;
                    }

                    $.post('/Dashboard/UploadBuildingImage', {
                        buildingId: buildingId,
                        imageName: selectedImage
                    }, function () {
                        alert('Building image updated.');
                        modal.modal('hide');
                        loadBuildingsList();
                        loadBuildings();
                    }).fail(function () {
                        alert('Failed to update building image.');
                    });
                });

                modal.find('#cancelSelectImage').off('click').on('click', function () {
                    modal.modal('hide');
                });
            }

            function confirmDeleteBuilding(id, name) {
                $('#deleteBuildingId').val(id);
                $('#deleteBuildingName').text(name);
                $('#deleteBuildingModal').modal('show');
            }

            function deleteBuilding(id) {
                if (!confirm('Are you sure you want to delete this building?')) return;

                $.ajax({
                    url: '/Dashboard/DeleteBuilding',
                    type: 'POST',
                    contentType: 'application/x-www-form-urlencoded',
                    data: { id: id },
                    success: function () {
                        alert('Building deleted successfully.');
                        // location.reload();
                        loadBuildingsList();
                        loadBuildings();
                        loadBuildingDropdowns();
                    },
                    error: function () {
                        alert('Delete failed.');
                    }
                });

            }

            let cachedCameraPoints = [];

            function showFloorPlan(buildingName, floor) {
                $.ajax({
                    url: `/Dashboard/GetFloorImage`,
                    method: 'GET',
                    data: { buildingName, floor },
                    xhrFields: { responseType: 'blob' },
                    success: function (data) {
                        const url = URL.createObjectURL(data);
                        $('#floor-plan-title').text(`${buildingName} - Floor ${floor}`);
                        $('#floor-plan-image').attr('src', url).show();
                        $('#no-floor-plan-message').hide();
                        $('#floor-plan-modal').show().addClass('active');

                        $.get('/Dashboard/GetFloorCameraSetpoints', { buildingName, floor }, function (points) {
                            $('.camera-marker').remove();
                            cachedCameraPoints = [];

                            points.forEach(cam => {
                                if (cam.coordinate) {
                                    const coords = cam.coordinate.split(',');
                                    if (coords.length === 3) {
                                        const cameraId = coords[0];
                                        const x = coords[1];
                                        const y = coords[2];
                                        const checkPointId = cam.checkPointId;
                                        const name = cam.name;
                                        drawCameraPoint(cameraId, checkPointId, x, y, name);

                                        cachedCameraPoints.push({ cameraId, checkPointId, x, y, name });
                                    }
                                }
                            });
                        });
                    },
                    error: function (xhr) {
                        if (xhr.status === 404) {
                            alert("No Floor Plan uploaded for this floor.");
                        } else {
                            alert("Failed to load floor image: " + xhr.status);
                        }
                    }
                });
            }

            function drawCameraPoint(cameraId, checkPointId, x, y, name) {
                const img = document.getElementById('floor-plan-image');
                const container = document.getElementById('floor-plan-wrapper');

                if (!img.complete) {
                    img.onload = () => drawCameraPoint(cameraId, checkPointId, x, y, name);
                    return;
                }

                const rect = img.getBoundingClientRect();

                const scaleX = rect.width / img.naturalWidth;
                const scaleY = rect.height / img.naturalHeight;

                const displayX = parseFloat(x) * scaleX;
                const displayY = parseFloat(y) * scaleY;

                const button = document.createElement('button');
                button.classList.add('camera-marker');
                button.style.position = 'absolute';
                button.style.left = `${displayX}px`;
                button.style.top = `${displayY}px`;
                button.style.width = '24px';
                button.style.height = '24px';
                button.title = name;
                button.innerHTML = `<img src="/Images/cam.jpg" width="24" height="24">`;

                button.dataset.cameraId = cameraId;
                button.dataset.checkpointId = checkPointId;

                button.onclick = function () {
                    startCameraStream(cameraId);
                };

                container.appendChild(button);
            }

            window.addEventListener("resize", function () {
                // Clear existing markers
                document.querySelectorAll('.camera-marker').forEach(el => el.remove());

                // Redraw
                cachedCameraPoints.forEach(p => {
                    drawCameraPoint(p.cameraId, p.checkPointId, p.x, p.y, p.name);
                });
            });

            function closeStream() {
              const $container = $('#camera-stream-container');

              const checkPointId = $container.data('checkpointId') || $container.attr('data-checkpoint-id');

              try {
                const video = document.getElementById('camera-stream');
                if (window.hls) {
                  try { window.hls.destroy(); } catch(e) {}
                  window.hls = null;
                }
                if (video) {
                  try { video.pause(); } catch(e) {}
                  video.removeAttribute('src');
                  video.load();
                }
              } catch(e) {
                console.warn('cleanup error:', e);
              }

              $container.hide();

              if (!checkPointId) return;

              $.ajax({
                url: `/Dashboard/StopCamera?checkPointId=${encodeURIComponent(checkPointId)}`,
                type: 'GET',
                success: function (res) {
                  console.log(res?.message ?? 'Camera stopped');
                },
                error: function (xhr) {
                  console.error("Error stopping camera stream:", xhr.responseJSON?.error || xhr.statusText);
                }
              });
            }
        </script>
    }
</body>
</html>