@{
    ViewBag.Title = "Schedule Camera Check";
}
@{
    var cameras = ViewBag.Cameras as List<AdminPortalV8.Models.Epatrol.Camera>;
    var locations = ViewBag.Locations as List<AdminPortalV8.Models.Epatrol.Location>;
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!--Font Style-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:ital@1&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!--CSS Style-->
    <link rel="stylesheet" href="/css/site.css" />

    <title>CRUD Operations</title>

    <script src="~/js/script.js"></script>
</head>
<body>

    <div class="container-fluid">
        <div class="row">
            <div>
                <button id="showResultsButton" class="btn btn-primary">
                    Show Camera Check Results
                </button>
            </div>
        </div>
    </div>

    <br />

    <div class="container-fluid">
        <div class="table-responsive">
            <table id="camera-table" class="table table-striped table-bordered" style="width: 100%;">
                <thead>
                    <tr>
                        <th><input type="checkbox" style="margin-right: 10px;">No.</th>
                        <th>Camera Name</th>
                        <th>Image</th>
                        <th>Camera URL</th>
                        <th>Connectivity </th>
                        <th>Location </th>
                        <th>Level </th>
                        <th>Actions</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>

    @section scripts {
        <script src="~/Assets/Plugins/extended-user-identity/mel.addon.module.js"></script>
        <script src="~/Assets/Plugins/datatables.net/js/jquery.dataTables.min.js"></script>
        <script src="~/Assets/Plugins/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
@*         <script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/1.10.25/js/dataTables.bootstrap4.min.js"></script> *@

        <script>
            $(document).ready(function () {
                bindDatatable();
            });

            function bindDatatable() {
                $('#camera-table').DataTable({
                    "processing": true,
                    "serverSide": true,
                    "searching": true,
                    "ajax": {
                        "url": "/ScheduleCameraCheck/GetCameraData",
                        "type": "GET",
                        "data": function (d) {   // ✅ Take user input for searching
                            d.search = d.search.value;
                            d.orderColumn = d.order[0].column; // Send sorting column index
                            d.orderDir = d.order[0].dir;       // Send sorting direction
                        },
                        "dataSrc": "data"
                    },
                    // "order": [],
                    "order": [[6, 'desc']], // Default sorting by Name
                    "columnDefs": [
                        { "orderable": false, "targets": 0 }
                    ],
                    "language": {
                        "emptyTable": "No record found.",
                        "processing": '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i> Loading...'
                    },
                    "columns": [
                        {
                            "data": null,
                            "render": function (data, type, row, meta) {
                                return meta.row + meta.settings._iDisplayStart + 1;
                            },
                            "orderable": false
                        },
                        {
                            "data": "name",
                            "autoWidth": true
                        },
                        {
                            "data": "cameraImage",
                            "autoWidth": true,
                            "render": function (data) {
                                if (data) {
                                    return `<div style="display: flex; justify-content: center; align-items: center; width: 60px; height: 60px; margin:auto;">
                                                <img src="data:image/jpeg;base64,${data}" style="object-fit: contain; max-width: 100%; max-height: 100%;"/>
                                            </div>`; // Centers the image in the box
                                } else {
                                    return '<span>No Image</span>';
                                }
                            }
                        },
                        {
                            "data": "url",
                            "autoWidth": true,
                            "render": function (data) {
                                return `
                                    <span>${data}</span>
                                    <span onclick="copyToClipboard('${data}')" style="cursor: pointer; font-size: 1.5em; margin-left: 8px;">📋</span>
                                `;
                            }
                        },
                        {
                            "data": "isActive",
                            "autoWidth": true,
                            "render": function (data) {
                                return data
                                    ? '<span style="color: green; font-weight: bold;">ON</span>'
                                    : '<span style="color: red; font-weight: bold;">OFF</span>';
                            }
                        },
                        {
                            "data": "locationName",
                            "autoWidth": true,
                            "render": function(data) {
                                return data || 'N/A';
                            }
                        },
                        {
                            "data": "locationLevel",
                            "autoWidth": true,
                            "render": function(data) {
                                return data || 'N/A';
                            }
                        },
                        {
                            "data": null,
                            "orderable": false,
                            "render": function (data, type, row) {
                                return `
                                    <button class="btn btn-info btn-sm" style="margin-bottom: 8px;"
                                            data-id="${row.cameraId}"
                                            data-name="${row.name}"
                                            data-url="${row.url}"
                                            data-camera-image="${row.cameraImage}"
                                            onclick="viewSchedule(this)"><i class="fas fa-eye"></i>View Schedule</button>
                                    <button class="btn btn-warning btn-sm" style="margin-bottom: 8px;"
                                            data-id="${row.cameraId}"
                                            data-name="${row.name}"
                                            data-url="${row.url}"
                                            data-camera-image="${row.cameraImage}"
                                            onclick="addSchedule(this)"><i class="fas fa-edit"></i>Add Schedule</button>
                                    <button class="btn btn-danger btn-sm"
                                            data-id="${row.cameraId}"
                                            data-name="${row.name}"
                                            data-camera-image="${row.cameraImage}"
                                            onclick="deleteSchedule(this)"><i class="fas fa-trash"></i>Delete Schedule</button>
                                `;
                            }
                        }
                    ]
                });
            }

            function copyToClipboard(text) {
                navigator.clipboard.writeText(text)
                    .then(() => showToast("Copied!", "green"))  // ✅ Green for success
                    .catch(() => showToast("Failed to copy", "red")); // ❌ Red for failure
            }

            function showToast(message, bgColor) {
                let toast = document.createElement("div");
                Object.assign(toast.style, {
                    position: "fixed", bottom: "20px", left: "50%", transform: "translateX(-50%)",
                    background: bgColor, color: "white", padding: "10px 20px", borderRadius: "5px",
                    fontSize: "14px", zIndex: "1000", opacity: "0.9", transition: "opacity 0.5s"
                });
                toast.innerText = message;
                document.body.appendChild(toast);
                setTimeout(() => (toast.style.opacity = "0"), 1000);
                setTimeout(() => document.body.removeChild(toast), 1500);
            }

            function previewImage(event) {
                var file = event.target.files[0];
                if (file) {
                    var reader = new FileReader();
                    reader.onload = function(e) {
                        $('#imagePreview')
                            .attr('src', e.target.result)
                            .css({
                                'display': 'block',
                                'width': '200px',
                                'height': '200px',
                                'object-fit': 'cover'
                            });
                    };
                    reader.readAsDataURL(file);
                }
            }

            function viewSchedule(button) {
                var cameraId = $(button).data('id');
                var cameraName = $(button).data('name');
                var cameraUrl = $(button).data('url');
                var cameraImage = $(button).data('cameraImage');

                // Adding debug logs
                console.log("Camera Image Data:", cameraImage);

                // Populate the modal fields
                $('#viewScheduleModal').find('#viewScheduleId').val(cameraId);
                $('#viewScheduleModal').find('#viewScheduleName').val(cameraName);

                // Modify image display logic
                if (cameraImage) {
                    $('#viewScheduleModal').find('#viewImagePreview')
                        .attr('src', 'data:image/jpeg;base64,' + cameraImage)
                        .css({
                            'display': 'block',
                            'width': '200px',
                            'height': '200px',
                            'object-fit': 'cover'
                        });
                } else {
                    $('#viewScheduleModal').find('#viewImagePreview')
                        .attr('src', '')
                        .hide();
                }

                console.log("selected " , cameraId + cameraName);

                // Open the modal
                $('#viewScheduleModal').modal('show');

                // Fetch schedules
                $.ajax({
                    url: '/ScheduleCameraCheck/GetCameraSchedules',
                    type: 'GET',
                    data: { cameraId: cameraId },
                    success: function (schedules) {
                        var scheduleList = $('#viewScheduleList');
                        scheduleList.empty(); // Clear any previous schedules
                        if (schedules.length > 0) {
                            schedules.forEach(function (schedule) {
                                var listItem = `
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>
                                                <strong>${schedule.scheduleName}</strong> - ${schedule.startTime}
                                            </span>
                                        </li>`;
                                scheduleList.append(listItem);
                            });
                        } else {
                            scheduleList.append('<li class="list-group-item">No schedules found.</li>');
                        }
                    },
                    error: function () {
                        alert('Failed to fetch schedules.');
                    }
                });
            }

            function addSchedule(button) {
                var cameraId = $(button).data('id');
                var cameraName = $(button).data('name');
                var cameraImage = $(button).data('cameraImage');

                // Fill Modal Box
                $('#addScheduleModal').find('#addCameraId').val(cameraId);
                $('#addScheduleModal').find('#addCameraName').val(cameraName);

                // Modify image display logic
                if (cameraImage) {
                    $('#addScheduleModal').find('#viewImagePreview')
                        .attr('src', 'data:image/jpeg;base64,' + cameraImage)
                        .css({
                            'display': 'block',
                            'width': '200px',
                            'height': '200px',
                            'object-fit': 'cover'
                        });
                } else {
                    $('#addScheduleModal').find('#viewImagePreview')
                        .attr('src', '')
                        .hide();
                }

                // Show modal box
                $('#addScheduleModal').modal('show');
            }


            function deleteSchedule(button) {
                var cameraId = $(button).data('id');
                var cameraName = $(button).data('name');
                var cameraUrl = $(button).data('url');
                var cameraImage = $(button).data('cameraImage');

                console.log("Camera Image Data:", cameraImage);

                // Populate the modal fields
                $('#deleteScheduleModal').find('#deleteScheduleId').val(cameraId);
                $('#deleteScheduleModal').find('#deleteScheduleName').val(cameraName);

                // Modify image display logic
                if (cameraImage) {
                    $('#deleteScheduleModal').find('#viewImagePreview')
                        .attr('src', 'data:image/jpeg;base64,' + cameraImage)
                        .css({
                            'display': 'block',
                            'width': '200px',
                            'height': '200px',
                            'object-fit': 'cover'
                        });
                } else {
                    $('#deleteScheduleModal').find('#viewImagePreview')
                        .attr('src', '')
                        .hide();
                }

                console.log("Selected:", cameraId, cameraName);

                // Open the modal
                $('#deleteScheduleModal').modal('show');

                // Fetch schedules
                $.ajax({
                    url: '/ScheduleCameraCheck/GetCameraSchedules',
                    type: 'GET',
                    data: { cameraId: cameraId },
                    success: function (schedules) {
                        var scheduleList = $('#deleteScheduleList');
                        scheduleList.empty(); // Clear any previous schedules
                        if (schedules.length > 0) {
                            schedules.forEach(function (schedule) {
                                var listItem = `
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>
                                                <strong>${schedule.scheduleName}</strong> - ${schedule.startTime}
                                            </span>
                                            <button class="btn btn-danger btn-sm delete-schedule" data-schedule-id="${schedule.scheduleId}" data-camera-id="${cameraId}" data-schedule-time="${schedule.startTime}">
                                                Delete
                                            </button>
                                        </li>`;
                                scheduleList.append(listItem);
                            });
                            // Binding events to the delete-schedule button
                            $('.delete-schedule').on('click', function () {
                                var scheduleId = $(this).data('schedule-id');
                                var cameraId = $(this).data('camera-id');
                                var scheduleTime = $(this).data('schedule-time');

                                confirmDeleteSchedule(scheduleId, cameraId, scheduleTime);
                            });
                        } else {
                            scheduleList.append('<li class="list-group-item">No schedules found.</li>');
                        }
                    },
                    error: function () {
                        alert('Failed to fetch schedules.');
                    }
                });
            }

            // **New Delete Schedule function**
            function confirmDeleteSchedule(scheduleId, cameraId, scheduleTime, notificationMethod) {
                if (confirm('Are you sure you want to delete this schedule?')) {
                    $.ajax({
                        url: '/ScheduleCameraCheck/DeleteCameraSchedule',
                        type: 'POST',
                        data: {
                            scheduleId: scheduleId,
                            cameraId: cameraId,
                            scheduleTime: scheduleTime,
                            notificationMethod: notificationMethod
                        },
                        success: function(response) {
                            if (response.success) {
                                // Refresh Calendar List
                                deleteSchedule($(`[data-id="${cameraId}"]`));
                            } else {
                                alert('Failed to delete schedule');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('Error deleting schedule:', error);
                            alert('Error occurred while deleting the schedule');
                        }
                    });
                }
            }


        </script>
    }

    <!-- Check Camera Result -->
    <div class="modal fade" id="cameraCheckResultsModal" tabindex="-1" role="dialog" aria-labelledby="resultsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content" id="cameraCheckResults">
                <div class="modal-header">
                    <h5 class="modal-title" id="resultsModalLabel">Camera Check Results</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="container">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input id="filterCameraName" type="text" class="form-control" placeholder="Search by Camera Name" />
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterCameraName')">Reset</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <select id="filterStatus" class="form-control">
                                    <option value="">Filter by Status</option>
                                    <option value="Working">Working</option>
                                    <option value="Not Working">Not Working</option>
                                    <option value="Dark">Dark</option>
                                    <option value="Blurry">Blurry</option>
                                </select>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterStatus')">Reset</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="filterStartDate" class="form-label">Start Date:</label>
                            <div class="input-group">
                                <input id="filterStartDate" type="date" class="form-control" />
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterStartDate')">Reset</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="filterEndDate" class="form-label">End Date:</label>
                            <div class="input-group">
                                <input id="filterEndDate" type="date" class="form-control" />
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="resetFilter('filterEndDate')">Reset</button>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end" style="text-align: right;">
                            <button id="applyFiltersButton" class="btn btn-primary">Apply Filters</button>
                        </div>
                    </div>
                </div>
                <div id="cameraResultsContainer"></div>
                <div id="paginationControls" class="mt-3 text-center"></div>
                <div class="modal-footer">
                    <button id="closeHistoryButton" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- View Camera Modal -->
    <div class="modal fade" id="viewScheduleModal" tabindex="-1" role="dialog" aria-labelledby="viewCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewCameraModalLabel">View Camera Details</h5>
                    @* <button type="button" class="close" data-dismiss="modal" aria-label="Close"> 
                         <span aria-hidden="true">&times;</span> 
                     </button>  *@
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="viewCameraName">Camera Id</label>
                        <input type="text" class="form-control" id="viewScheduleId" readonly />
                    </div>
                    <div class="form-group">
                        <label for="viewCameraUrl">Camera Name</label>
                        <input type="text" class="form-control" id="viewScheduleName" readonly />
                    </div>
                    <div class="form-group">
                        <label>Camera Image Preview:</label><br />
                        <img id="viewImagePreview" src="#" alt="Image Preview" style="max-width: 100%; height: auto;" />
                    </div>
                    <div class="form-group">
                        <h5>Existing Schedules:</h5>
                        <ul id="viewScheduleList" class="list-group"></ul>
                        <!-- Schedule items will be appended here dynamically -->
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Camera Modal -->
    <div class="modal fade" id="deleteScheduleModal" tabindex="-1" role="dialog" aria-labelledby="viewCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewCameraModalLabel">View Camera Details</h5>
                    @* <button type="button" class="close" data-dismiss="modal" aria-label="Close"> 
                         <span aria-hidden="true">&times;</span> 
                     </button>  *@
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="viewCameraName">Camera Id</label>
                        <input type="text" class="form-control" id="deleteScheduleId" readonly />
                    </div>
                    <div class="form-group">
                        <label for="viewCameraUrl">Camera Name</label>
                        <input type="text" class="form-control" id="deleteScheduleName" readonly />
                    </div>
                    <div class="form-group">
                        <label>Camera Image Preview:</label><br />
                        <img id="viewImagePreview" src="#" alt="Image Preview" style="max-width: 100%; height: auto;" />
                    </div>
                    <div class="form-group">
                        <h5>Existing Schedules:</h5>
                        <ul id="deleteScheduleList" class="list-group"></ul>
                        <!-- Schedule items will be appended here dynamically -->
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    @*  <!-- Schedule Modal -->
    <div class="modal fade" id="addScheduleModal" tabindex="-1" role="dialog" aria-labelledby="scheduleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Set Schedule for <span id="modalCameraName"></span>
                    </h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="scheduleForm" action="/ScheduleCameraCheck/SetCameraHealthCheckSchedule" method="post">
                        <input type="text" id="cameraId" name="CameraId" />
                        <div class="form-group">
                            <label for="addCameraId">Schedule Time</label>
                            <input type="time" class="form-control" id="addCameraId" name="Time" required />
                        </div>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Add Schedule</button>
                        </div>
                    </form>

                    <hr>

                    <h6>Current Schedules</h6>
                    <ul id="scheduleList" class="list-group">
                        <!-- Schedules will be populated here -->
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div> *@

    <!-- Add Schedule Modal -->
    <div class="modal fade" id="addScheduleModal" tabindex="-1" role="dialog" aria-labelledby="viewCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewCameraModalLabel">View Camera Details</h5>
                    @* <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button> *@
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Camera Image Preview:</label><br />
                        <img id="viewImagePreview" src="#" alt="Image Preview" style="max-width: 100%; height: auto;" />
                    </div>
                    <div class="form-group">
                        <label for="addCameraId">Camera Id</label>
                        <input type="text" class="form-control" id="addCameraId" readonly />
                    </div>
                    <div class="form-group">
                        <label for="addCameraName">Camera Name</label>
                        <input type="text" class="form-control" id="addCameraName" readonly />
                    </div>
                    <div class="form-group">
                        <label for="scheduleTime">Schedule Time</label>
                        <input type="time" class="form-control" id="scheduleTime" name="Time" required />
                    </div>
                    <div class="p-4 border rounded shadow-sm bg-white max-w-md">
                        <h5 class="text-lg font-semibold mb-3">Select Notification Method</h5>
                        <form id="methodForm">
                            <div class="space-y-2">
                                <div class="flex items-center">
                                    <input type="radio" name="method" id="telegram" value="Telegram" checked
                                           class="w-4 h-4 text-blue-600"
                                           onchange="sendCheckRequest(this.value)">
                                    <label for="telegram" class="ml-2">Telegram</label>
                                </div>
                                
                                <div class="flex items-center">
                                    <input type="radio" name="method" id="whatsapp" value="WhatsApp" checked
                                           class="w-4 h-4 text-blue-600"
                                           onchange="sendCheckRequest(this.value)">
                                    <label for="whatsapp" class="ml-2">WhatsApp</label>
                                </div>

                                <div class="flex items-center">
                                    <input type="radio" name="method" id="sms" value="SMS"
                                           class="w-4 h-4 text-blue-600"
                                           onchange="sendCheckRequest(this.value)">
                                    <label for="sms" class="ml-2">SMS</label>
                                </div>

                                <div class="flex items-center">
                                    <input type="radio" name="method" id="both" value="Both"
                                           class="w-4 h-4 text-blue-600"
                                           onchange="sendCheckRequest(this.value)">
                                    <label for="both" class="ml-2">Both</label>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="submit" id="addScheduleBtn" class="btn btn-primary">Save</button>
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function() {
            // Fetch initial results when the modal is opened
            $('#showResultsButton').on("click", function() {
                fetchResults(currentPage);
                $("#cameraCheckResultsModal").modal('show');
            })

            $('#addScheduleBtn').on("click", function(event) {
                event.preventDefault();  // Prevent form submission

                // Get the values from the form fields
                var cameraId = $('#addCameraId').val();  // Get Camera ID value
                var cameraName = $('#addCameraName').val();  // Get Camera Name value
                var scheduleTime = $('#scheduleTime').val();  // Get Schedule Time value
                var notificationMethod = $('input[name="method"]:checked').val();  // Get selected notification method

                    // Prepare the data to send in the request
                var formData = {
                    CameraId: cameraId,
                    Time: scheduleTime, // Ensure that "Time" is passed as expected
                    NotificationMethod: notificationMethod
                };
                //console.log('CameraId:', cameraId, 'Time:', scheduleTime, 'NotificationMethod:', notificationMethod);


                // Send the data to the server using AJAX
                $.ajax({
                    url: '/ScheduleCameraCheck/SetCameraHelthCheckSchedule', // Your server endpoint
                    type: 'POST',
                    data: formData, // Send the data as an object
                    success: function(response) {
                        if (response.success) {
                            showToast("Schedule added successfully!", "green");
                            location.reload();
                        } else {
                            showToast(response.message || "Failed to add schedule", "red");
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error adding schedule:', error);
                        showToast("Error adding schedule. Please try again.", "red");
                    }
                });
            });

        });

        function reset() {
            document.getElementById("filterCameraName").value = "";
            document.getElementById("filterStatus").value = "";
            document.getElementById("filterStartDate").value = "";
            document.getElementById("filterEndDate").value = "";
        }

        document.querySelector(".close").addEventListener("click", reset);

        let currentPage = 1;
        const pageSize = 20;

        function fetchResults(page = 1) {
            // Get filter values
            const cameraName = document.getElementById("filterCameraName").value;
            const status = document.getElementById("filterStatus").value;
            const startDate = document.getElementById("filterStartDate").value;
            const endDate = document.getElementById("filterEndDate").value;

            // Build query parameters
            const queryParams = new URLSearchParams({
                page,
                pageSize,
                cameraName,
                status,
                startDate,
                endDate,
            });

            fetch(`/ScheduleCameraCheck/GetCameraCheckResults?${queryParams.toString()}`)
            .then(response => response.json())
            .then(data => {
            if (data.success) {
                const resultsContainer = document.getElementById("cameraResultsContainer");
                const paginationControls = document.getElementById("paginationControls");

                if (data.results.length > 0) {
                    // Build results table
                    let resultsHtml = '<table class="table table-bordered">';
                    resultsHtml += '<thead><tr><th>Camera ID</th><th>Camera Name</th><th>Status</th><th>Message</th><th>Timestamp</th></tr></thead><tbody>';

                    data.results.forEach(result => {
                        const statusClass =
                            result.status === 'Working'
                                ? 'status-working'
                                : result.status === 'Not Working'
                                ? 'status-not-working'
                                :  result.status === 'Blurry'
                                ? 'status-blurry'
                                :  result.status === 'Dark'
                                ? 'status-dark'
                                : 'status-unknown';


                        resultsHtml += `
                        <tr>
                            <td>${result.cameraId}</td>
                            <td>${result.cameraName}</td>
                            <td class="${statusClass}">${result.status}</td>
                            <td>${result.message}</td>
                            <td>${result.timestamp}</td>
                        </tr>
                        `;
                    });

                    resultsHtml += '</tbody></table>';
                    resultsContainer.innerHTML = resultsHtml;

                    // Build pagination controls
                    const { currentPage, totalPages } = data.pagination;
                    let paginationHtml = '';

                    if (totalPages > 1) {
                        if (currentPage > 1) {
                            paginationHtml += `<button class="btn btn-secondary" onclick="fetchResults(${currentPage - 1})">Previous</button>`;
                      }
                      paginationHtml += ` <span>Page ${currentPage} of ${totalPages}</span> `;
                        if (currentPage < totalPages) {
                            paginationHtml += `<button class="btn btn-secondary" onclick="fetchResults(${currentPage + 1})">Next</button>`;
                        }
                    }

                    paginationControls.innerHTML = paginationHtml;
                  } else {
                        resultsContainer.innerHTML = '<p class="text-center">Don\'t have any result for checking</p>';
                        paginationControls.innerHTML = '';
                  }
                } else {
                    alert("Failed to fetch results. Please try again.");
                }
              })
              .catch(error => console.error('Error fetching results:', error));
          }

        function resetFilter(filterId) {
            // Clear the value of the specified filter input
            document.getElementById(filterId).value = "";

            // Fetch results with the updated filters
            fetchResults(1); // Reset to the first page
        }

        document.getElementById("closeHistoryButton").addEventListener("click", function () {
            reset();
        });

        // Fetch results when the "Apply Filters" button is clicked
        document.getElementById("applyFiltersButton").addEventListener("click", function () {
            currentPage = 1; // Reset to the first page
            fetchResults(currentPage);
        });






        // Add form submission handler
        $('#scheduleForm').on('submit', function(e) {
            e.preventDefault();

            var formData = {
                CameraId: $('#cameraId').val(),
                Time: $('#scheduleTime').val(),
                NotificationMethod: $('input[name="method"]:checked').val() || 'Telegram' // Default to Telegram if none selected
            };

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: formData,
                success: function(response) {
                    // Refresh the schedules list
                    addSchedule($(`[data-id="${formData.CameraId}"]`));
                    $('#scheduleTime').val(''); // Clear the time input
                },
                error: function(xhr, status, error) {
                    console.error('Error adding schedule:', error);
                    alert('Failed to add schedule. Please try again.');
                }
            });
        });



        function submitMethod() {
            let selectedMethod = document.querySelector('input[name="method"]:checked').value; // Get selected method

            fetch('/ScheduleCameraCheck/SendNotification', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ Method: selectedMethod }) // Send selected method
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message); // Show success/failure message
                closeModal(); // Close modal after submission
            })
            .catch(error => console.error('Error:', error));
        }

        function sendCheckRequest(method) {
            document.getElementById("notificationModal").style.display = "none";
            fetch('/ScheduleCameraCheck/SendNotification', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ notificationMethod: method })
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
            })
            .catch(error => console.error('Error:', error));
        }

    </script>
</body>
</html>