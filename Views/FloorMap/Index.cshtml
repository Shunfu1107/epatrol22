@using AdminPortalV8.Helpers
@{
    ViewBag.Title = "Floor Map";
}
@section Styles {
    <link rel="stylesheet" href="~/Assets/Plugins/datatables.net-bs/css/dataTables.bootstrap.min.css">
    <style>
        .green-tick {
            position: absolute;
            width: 20px;
            height: 20px;
            background-color: green;
            clip-path: polygon(50% 0%, 100% 100%, 0% 100%);
            display: none;
        }
    </style>
}
@section scripts {
    <script>
        $(document).ready(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const buildingId = urlParams.get('buildingId');

            if (buildingId) {
                $.get('/FloorMap/GetLocationsByBuilding', { buildingId }, function (filteredLocations) {
                    if (filteredLocations && filteredLocations.length > 0) {
                        const firstLocationId = filteredLocations[0].locationId;

                        const dropdown = $('#location');
                        dropdown.val(firstLocationId);

                        dropdown.trigger('change');
                    }
                });
            }

            $('#setCameraBtn').on('click', function () {
                var locationId = document.getElementById("location").value;
                if (!locationId) {
                    alert("Please select a location first.");
                    return;
                }
                var patrolMapPreview = document.getElementById("patrolMapPreview");
                var patrolMapModalPreview = document.getElementById("patrolMapModalPreview");
                patrolMapModalPreview.src = patrolMapPreview.src;
                patrolMapModalPreview.style.display = patrolMapPreview.style.display;
                if (locationId) {
                    $.ajax({
                        url: '/FloorMap/GetCamerasByLocation',
                        type: 'GET',
                        data: { locationId: locationId },
                        success: function (response) {
                            var cameraDropdown = $('#camera');
                            cameraDropdown.empty();
                            cameraDropdown.append('<option value="">Select Camera</option>');

                            response.forEach(function (camera) {
                                cameraDropdown.append(`<option value="${camera.cameraId}">${camera.name}</option>`);
                            });

                            cameraDropdown.off('change').on('change', function () {
                                drawSelectedCameraOnModal(locationId);
                                populateCheckpointCameraTable(locationId);
                            });

                            $('#cameraModal').modal('show');
                        },
                        error: function () {
                            alert('Failed to load cameras.');
                        }
                    });
                }
            });
        });

        var currentImageIndex = 0, checkpointImages = [], checkpointIds = [], locationIds = [], groupedByLocation = {};

        function loadFloorPlan() {
            var locationId = document.getElementById("location").value;
            if (!locationId) return;

            const locations = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Locations));
            const cameras = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllCameras));

            const location = locations.find(l => l.LocationId == locationId);
            const image = location.ImageData;
            const preview = document.getElementById("patrolMapPreview");

            if (image) {
                preview.style.display = "none";  // hide until loaded
                preview.onload = function () {
                    preview.style.display = "block";
                    drawCameraPoints(locationId);               // ✅ safe to draw now
                    populateCheckpointCameraTable(locationId);  // ✅ now table and points load correctly
                };
                preview.src = "data:image/png;base64," + image;
            }
        }

        function groupByLocation(checkpointIds, locationIds, checkpointImages) {
            let grouped = {};
            for (let i = 0; i < checkpointIds.length; i++) {
                let locationId = locationIds[i];
                if (!grouped[locationId]) {
                    grouped[locationId] = { checkpointIds: [], images: [] };
                }
                grouped[locationId].checkpointIds.push(checkpointIds[i]);
                grouped[locationId].images.push(checkpointImages[i]);
            }
            return grouped;
        }

        function populateCheckpointCameraTable(locationId) {
            const cameras = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllCameras));
            const table = document.getElementById("checkpointCameraTable");
            const tbody = table.querySelector("tbody");

            tbody.innerHTML = "";

            const filtered = cameras.filter(cam => cam.LocationId == locationId && cam.Coordinate);

            if (filtered.length === 0) {
                table.style.display = "none";
                return;
            }

            filtered.forEach(cam => {
                const row = document.createElement("tr");

                // Camera name
                const camCell = document.createElement("td");
                camCell.innerText = cam.Name || "Unnamed Camera";
                row.appendChild(camCell);

                // View button
                const viewCell = document.createElement("td");
                const viewBtn = document.createElement("button");
                viewBtn.className = "btn btn-sm btn-info";
                viewBtn.innerText = "View Camera";
                viewBtn.onclick = function () {
                    openCameraModal(cam.Url, cam.CameraId, this);
                };
                viewCell.appendChild(viewBtn);
                row.appendChild(viewCell);

                // Delete button
                const deleteCell = document.createElement("td");
                const deleteBtn = document.createElement("button");
                deleteBtn.className = "btn btn-sm btn-danger";
                deleteBtn.innerText = "Delete";
                deleteBtn.onclick = function () {
                    openDeleteModal(cam.CameraId);
                };
                deleteCell.appendChild(deleteBtn);
                row.appendChild(deleteCell);

                tbody.appendChild(row);
            });

            table.style.display = "table";
        }

        // function updateImageAndTable(selectedRouteId) {
        //     var patrolMapPreview = document.getElementById("patrolMapPreview");
        //     var checkpointCameraTable = document.getElementById("checkpointCameraTable");
        //     var tableBody = checkpointCameraTable.querySelector("tbody");

        //     var currentLocationId = Object.keys(groupedByLocation)[currentImageIndex];
        //     var currentImages = groupedByLocation[currentLocationId].images;
        //     var currentCheckpointIds = groupedByLocation[currentLocationId].checkpointIds;

        //     var currentImage = currentImages[0];
        //     if (currentImage) {
        //         patrolMapPreview.src = "data:image/png;base64," + currentImage;
        //         patrolMapPreview.style.display = "block";
        //     } else {
        //         patrolMapPreview.src = "";
        //         patrolMapPreview.style.display = "none";
        //     }

        //     document.getElementById("checkpointId").value = currentCheckpointIds[0];
        //     document.getElementById("locationId").value = currentLocationId;
        //     populateCameraTable(selectedRouteId, currentLocationId);
        // }

        // function populateCameraTable(selectedRouteId, selectedLocationId) {
        //     var checkpoints = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.RouteCheckpoints));

        //     var filteredByRoute = checkpoints.filter(cp => cp.RouteId == selectedRouteId);

        //     var filteredCheckpoints = filteredByRoute.filter(cp => cp.LocationId == selectedLocationId);

        //     var tableBody = document.querySelector("#checkpointCameraTable tbody");

        //     tableBody.innerHTML = '';

        //     filteredCheckpoints.forEach(function (checkpoint) {
        //         var row = document.createElement("tr");

        //         var nameCell = document.createElement("td");
        //         nameCell.textContent = checkpoint.CameraName + " - (" + checkpoint.CheckPointName + ")";

        //         var urlCell = document.createElement("td");
        //         urlCell.innerHTML = `<button class="btn btn-primary" onclick="openCameraModal('${checkpoint.CameraUrl}', '${checkpoint.CheckPointId}', this)">View Camera</button>`;

        //         var deleteCell = document.createElement("td");
        //         deleteCell.innerHTML = `<button class="btn btn-danger" onclick="openDeleteModal(${checkpoint.RouteId}, ${checkpoint.CheckPointId}, ${checkpoint.CameraId})">Delete</button>`;

        //         row.appendChild(nameCell);
        //         row.appendChild(urlCell);
        //         row.appendChild(deleteCell);

        //         tableBody.appendChild(row);
        //     });

        //     if (filteredCheckpoints.length > 0) {
        //         checkpointCameraTable.style.display = "table";
        //     } else {
        //         checkpointCameraTable.style.display = "none";
        //     }

        //     drawCameraPoints(selectedLocationId);
        // }

        // function nextImage() {
        //     if (currentImageIndex < Object.keys(groupedByLocation).length - 1) {
        //         currentImageIndex++;
        //         var select = document.getElementById("route");
        //         var selectedOption = select.options[select.selectedIndex];
        //         var selectedRouteId = selectedOption.value;
        //         updateImageAndTable(selectedRouteId);

        //         var imageIndexSpan = document.getElementById("imageIndex");
        //         imageIndexSpan.innerHTML = `${currentImageIndex + 1}`;
        //     }
        // }

        // function prevImage() {
        //     if (currentImageIndex > 0) {
        //         currentImageIndex--;
        //         var select = document.getElementById("route");
        //         var selectedOption = select.options[select.selectedIndex];
        //         var selectedRouteId = selectedOption.value;
        //         updateImageAndTable(selectedRouteId);

        //         var imageIndexSpan = document.getElementById("imageIndex");
        //         imageIndexSpan.innerHTML = `${currentImageIndex + 1}`;
        //     }
        // }

        function drawCameraPoints(locationId) {
            const patrolMapPreview = document.getElementById("patrolMapPreview");
            if (patrolMapPreview.naturalWidth === 0 || patrolMapPreview.naturalHeight === 0) {
                setTimeout(() => drawCameraPoints(locationId), 100);
                return;
            }

            const container = patrolMapPreview.parentElement;

            const oldIcons = container.querySelectorAll(".camera-icon");
            oldIcons.forEach(el => el.remove());

            const cameras = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllCameras));

            const filteredCameras = cameras.filter(c => c.LocationId == locationId && c.Coordinate);

            filteredCameras.forEach(cp => {
                const [camId, x, y] = cp.Coordinate.split(',').map(v => v.trim());

                const imgNaturalWidth = patrolMapPreview.naturalWidth;
                const imgNaturalHeight = patrolMapPreview.naturalHeight;
                const imgDisplayWidth = patrolMapPreview.clientWidth;
                const imgDisplayHeight = patrolMapPreview.clientHeight;

                const scaleX = imgDisplayWidth / imgNaturalWidth;
                const scaleY = imgDisplayHeight / imgNaturalHeight;

                const displayX = parseFloat(x) * scaleX;
                const displayY = parseFloat(y) * scaleY;

                const icon = document.createElement("img");
                icon.src = "/Images/cam.jpg";
                icon.className = "camera-icon";
                icon.style.position = "absolute";
                icon.style.width = "24px";
                icon.style.height = "24px";
                icon.style.left = patrolMapPreview.offsetLeft + displayX - 12 + "px";
                icon.style.top = patrolMapPreview.offsetTop + displayY - 12 + "px";
                icon.style.cursor = "pointer";
                icon.title = cp.Name;

                icon.onclick = function () {
                    openCameraModal(cp.Url, cp.CameraId, icon);
                };

                container.appendChild(icon);
            });
        }

        function drawSelectedCameraOnModal(locationId) {
            const preview = document.getElementById("patrolMapModalPreview");
            const container = document.getElementById("patrolMapContainer");
            const selectedId = parseInt(document.getElementById("camera").value);

            // Remove previous preview icon
            container.querySelectorAll(".camera-icon-preview").forEach(el => el.remove());

            const allCameras = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllCameras));
            const cam = allCameras.find(c => c.CameraId === selectedId && c.LocationId === parseInt(locationId));

            if (!cam || !cam.Coordinate) return;

            const [camId, x, y] = cam.Coordinate.split(',').map(v => parseFloat(v.trim()));

            const scaleX = preview.clientWidth / preview.naturalWidth;
            const scaleY = preview.clientHeight / preview.naturalHeight;
            const displayX = x * scaleX;
            const displayY = y * scaleY;

            const icon = document.createElement("img");
            icon.src = "/Images/cam.jpg";
            icon.className = "camera-icon-preview";
            icon.style.position = "absolute";
            icon.style.width = "24px";
            icon.style.height = "24px";
            icon.style.left = preview.offsetLeft + displayX - 12 + "px";
            icon.style.top = preview.offsetTop + displayY - 12 + "px";
            icon.style.pointerEvents = "none";
            icon.title = cam.Name;

            container.appendChild(icon);
        }


        var selectedCoordinates = [];
        var currentTick = null;

        function setPoint(event) {
            var img = document.getElementById("patrolMapModalPreview");
            var rect = img.getBoundingClientRect();
            var x = event.clientX - rect.left;
            var y = event.clientY - rect.top;

            var scaleX = img.naturalWidth / rect.width;
            var scaleY = img.naturalHeight / rect.height;

            var adjustedX = Math.floor(x * scaleX);
            var adjustedY = Math.floor(y * scaleY);

            if (currentTick) {
                document.getElementById("patrolMapContainer").removeChild(currentTick);
            }

            currentTick = document.createElement("div");
            currentTick.className = "green-tick";
            currentTick.style.left = (x + 5) + "px";
            currentTick.style.top = (y + 13) + "px";
            currentTick.style.display = "block";

            document.getElementById("patrolMapContainer").appendChild(currentTick);

            selectedCoordinates = [{ x: adjustedX, y: adjustedY }];
            console.log(selectedCoordinates);
            document.getElementById("saveCameraCoordinatesBtn").disabled = false;
        }

        $('#cameraModal').on('hidden.bs.modal', function () {
            if (currentTick) {
                document.getElementById("patrolMapContainer").removeChild(currentTick);
                currentTick = null;
                document.getElementById("saveCameraCoordinatesBtn").disabled = true;
            }
        });

        function saveCoordinates() {
            const cameraDropdown = document.getElementById("camera");
            if (!cameraDropdown) {
                alert("Camera dropdown not found!");
                return;
            }

            const cameraId = parseInt(cameraDropdown.value);
            if (!cameraId) {
                alert("Please select a camera.");
                return;
            }

            if (selectedCoordinates.length === 0) {
                alert("Please click on the map to set camera position.");
                return;
            }

            const { x, y } = selectedCoordinates[0];

            const payload = {
                cameraId: cameraId,
                x: x,
                y: y
            };

            var locationId = $('#location').val();
            console.log(locationId);

            fetch('/FloorMap/SaveCameraCoordinate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            }).then(res => res.json())
              .then(data => {
                  if (data.success) {
                      alert("Camera coordinate saved successfully.");
                      $('#cameraModal').modal('hide');
                      localStorage.setItem('selectedLocationId', locationId);
                      location.reload();
                  } else {
                      alert("Error: " + data.message);
                  }
              });
        }


        document.getElementById("saveCameraCoordinatesBtn").disabled = true;

        let stopAnalyzeVideo;

        function openCameraModal(cameraUrl, checkPointId, button) {
            if (button) {
                button.classList.add('disabled');
                button.style.pointerEvents = "none";
                button.innerText = "Please wait...";
            }

            console.log('Opening camera stream: ' + cameraUrl);
            console.log('Check Point Id: ' + checkPointId);
            const video = document.getElementById('cameraVideo');
            const canvas = document.createElement('canvas');

            fetch(`/FloorMap/StartCamera?cameraUrl=${encodeURIComponent(cameraUrl)}&checkPointId=${checkPointId}`, {
                method: 'GET'
            })
                .then(response => {
                    if (response.ok) {
                        if (Hls.isSupported()) {
                            const hls = new Hls();
                            hls.loadSource(`/stream/output_camera${checkPointId}.m3u8`);
                            hls.attachMedia(video);
                            let playbackStarted = false;
                            hls.on(Hls.Events.MANIFEST_PARSED, function () {
                                console.log("HLS manifest parsed, starting playback.");
                                resetButton(button);
                                video.style.display = 'block';
                                video.play();
                                playbackStarted = true;
                                stopAnalyzeVideo = analyzeVideo(video, canvas);
                            });
                            hls.on(Hls.Events.ERROR, function (event, data) {
                                console.error("HLS error:", data);
                                resetButton(button);
                                if (!playbackStarted) {
                                    alert("Camera is not connected. Please check the power supply or cable connection.");
                                }
                            });
                        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                            video.src = `/stream/output_camera${checkPointId}.m3u8`;
                            console.log("Playing video using native HLS support.");
                            resetButton(button);
                            video.style.display = 'block';
                            video.play();

                            stopAnalyzeVideo = analyzeVideo(video, canvas);
                        }
                        $('#cameraViewModal').modal('show');
                    } else {
                        resetButton(button);
                        console.error("Error starting FFmpeg process.");
                    }
                })
                .catch(error => {
                    console.error("Fetch error:", error);
                    resetButton(button);
                });
        }

        function analyzeVideo(video, canvas) {
            const context = canvas.getContext('2d');
            let analyzing = true;

            function checkFrame() {
                if (!analyzing) {
                    console.log("Stopping video analysis.");
                    return;
                }

                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);

                    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    const pixels = imageData.data;
                    let totalBrightness = 0;
                    let edgeCount = 0;

                    for (let i = 0; i < pixels.length; i += 4) {
                        const r = pixels[i];
                        const g = pixels[i + 1];
                        const b = pixels[i + 2];
                        const brightness = 0.299 * r + 0.587 * g + 0.114 * b;
                        totalBrightness += brightness;

                        if (i < pixels.length - 4) {
                            const nextBrightness = 0.299 * pixels[i + 4] + 0.587 * pixels[i + 5] + 0.114 * pixels[i + 6];
                            if (Math.abs(brightness - nextBrightness) > 50) {
                                edgeCount++;
                            }
                        }
                    }

                    const avgBrightness = totalBrightness / (pixels.length / 4);
                    if (avgBrightness < 10) {
                        alert("The camera view is dark. Please check the camera.");
                        return;
                    }
                    console.log(edgeCount);
                    const edgeThreshold = 2000;
                    if (edgeCount < edgeThreshold) {
                        alert("The camera view is blurry. Please check the camera.");
                        return;
                    }
                }

                // Continue the loop
                requestAnimationFrame(checkFrame);
            }

            checkFrame();

            return () => {
                analyzing = false;
            };
        }

        function resetButton(button) {
            button.classList.remove('disabled');
            button.style.pointerEvents = "auto";
            button.innerText = "View Camera";
        }

        $('#cameraViewModal').on('hidden.bs.modal', function () {
            fetch(`/FloorMap/StopCamera`, {
                method: 'GET'
            })
                .then(response => {
                    if (response.ok) {
                        console.log("FFmpeg process stopped successfully.");
                    } else {
                        console.error("Error stopping FFmpeg process.");
                    }
                })
                .catch(error => console.error("Fetch error:", error));

            // Stop the video analysis
            if (stopAnalyzeVideo) {
                stopAnalyzeVideo();
            }
        });

        function openDeleteModal(cameraId) {
            $('#deleteCameraId').val(cameraId);

            $('#deleteCameraModal').modal('show');
        }

        $(document).ready(function () {
            refreshFloorMap();

            $('#deleteCameraForm').on('submit', function (event) {
                event.preventDefault();

                var cameraId = $('#deleteCameraId').val();
                var locationId = $('#location').val();

                $.ajax({
                    url: '/FloorMap/DeleteCameraCoordinate',
                    type: 'POST',
                    data: JSON.stringify({
                        CameraId: cameraId
                    }),
                    contentType: 'application/json',
                    success: function (response) {
                        if (response.success) {
                            $('#deleteCameraModal').modal('hide');
                            localStorage.setItem('selectedLocationId', locationId);
                            location.reload();
                        } else {
                            alert('Error: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                        alert('An error occurred while deleting the camera.');
                    }
                });
            });
        });

        function refreshFloorMap() {
            var storedLocationId = localStorage.getItem('selectedLocationId');
            if (!storedLocationId) return;

            var locationSelect = document.getElementById("location");
            locationSelect.value = storedLocationId;

            const locations = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Locations));
            const location = locations.find(l => l.LocationId == storedLocationId);
            const image = location?.ImageData;
            const preview = document.getElementById("patrolMapPreview");

            if (image) {
                preview.style.display = "none"; // Hide until loaded

                setTimeout(function () {
                    preview.onload = function () {
                        preview.style.display = "block";
                        drawCameraPoints(storedLocationId);               // ✅ Only draw after image is ready
                        populateCheckpointCameraTable(storedLocationId);  // ✅ Refresh table too
                    };
                    preview.src = "data:image/png;base64," + image;
                }, 300);
            }

            localStorage.removeItem('selectedLocationId');
        }


        // $(document).ready(function () {
        //     var storedRouteId = localStorage.getItem('selectedRouteId');
        //     var storedImageIndex = localStorage.getItem('currentImageIndex');

        //     if (storedRouteId) {
        //         $('#route').val(storedRouteId).trigger('change');

        //         if (storedImageIndex !== null) {
        //             currentImageIndex = parseInt(storedImageIndex);

        //             var imageIndexSpan = document.getElementById("imageIndex");
        //             imageIndexSpan.innerHTML = `${currentImageIndex + 1}`;

        //             var select = document.getElementById("route");
        //             var selectedOption = select.options[select.selectedIndex];
        //             var selectedRouteId = selectedOption.value;

        //             updateImageAndTable(selectedRouteId);
        //         }

        //         localStorage.removeItem('selectedRouteId');
        //         localStorage.removeItem('currentImageIndex');
        //     }
        // });

        window.addEventListener("resize", function () {
            const locationId = document.getElementById("location").value;
            if (locationId) {
                drawCameraPoints(locationId);
            }
        });


        //Stop FFMpeg Processes
        window.addEventListener("beforeunload", function (event) {
            navigator.sendBeacon("/FloorMap/StopStreaming");
        });
    </script>
}
<!DOCTYPE html>
<html>
<head>
    <title>Floor Map Page</title>
    <!--JQuery for Modal Population -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <link href="https://vjs.zencdn.net/7.11.4/video-js.css" rel="stylesheet">
    <script src="https://vjs.zencdn.net/7.11.4/video.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <!--Font Style-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:ital@1&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!--CSS Style-->
    <link rel="stylesheet" href="/css/site.css" />
</head>
<body>
    <!-- Main View -->
    <div class="container-fluid">
        <div class="header-container">
            <h3>Floor Map</h3>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-3" style="margin-left: 3px;">
                <div style="display: flex; align-items: center;">
                    <label for="route" style="margin-right: 10px; white-space: nowrap;">Select Location</label>
                    <select class="form-control" id="location" name="location" style="border-radius: 5px; width: 100%;" onchange="loadFloorPlan()">
                        <option value="">Please Select</option>
                        @if (ViewBag.Locations != null)
                        {
                            foreach (var location in ViewBag.Locations)
                            {
                                <option value="@location.LocationId">@location.BuildingName - Floor @location.FloorName</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div style="margin-left: 20px;">
                <button id="setCameraBtn" class="btn btn-primary">Set Camera</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-7" style="position:relative;">
                <div id="floorMapContainer" style="margin-top:15px;">
                    <img id="patrolMapPreview" src="" alt="Patrol Map" style="display:none; max-width: 100%; max-height:600px; margin-top: 20px;" />
                </div>
            </div>
            <div class="col-md-3" style="margin-top: 20px;">
                <table class="table table-bordered" id="checkpointCameraTable" style="display: none;">
                    <thead class="thead-light">
                        <tr>
                            <th>Camera</th>
                            <th>Camera View</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Table rows will be inserted by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal for setting camera -->
    <div class="modal fade" id="cameraModal" tabindex="-1" role="dialog" aria-labelledby="cameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cameraModalLabel">Set Camera</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="patrolMapContainer">
                    <img id="patrolMapModalPreview" src="" alt="Patrol Map" style="display:none; width: 100%; height: auto;" onclick="setPoint(event)" />
                    <div id="greenTick" class="green-tick"></div>
                    <div class="form-group">
                        <label for="camera">Select Camera</label>
                        <select class="form-control" id="camera" name="camera">
                            <option value="">Select Camera</option>
                            @foreach (var cam in ViewBag.AllCameras)
                            {
                                <option value="@cam.CameraId">@cam.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer" style="text-align: center;">
                    <button type="button" class="btn btn-primary" id="saveCameraCoordinatesBtn" onclick="saveCoordinates()" disabled>Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Camera Modal -->
    <div class="modal fade" id="cameraViewModal" tabindex="-1" role="dialog" aria-labelledby="cameraViewModal" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cameraViewModalLabel">Camera View</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <video id="cameraVideo" class="video-js vjs-default-skin" preload="auto" style="width: 100%; height: 100%;"></video>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Camera Modal -->
    <div class="modal fade" id="deleteCameraModal" tabindex="-1" role="dialog" aria-labelledby="deleteCameraModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="deleteCameraModalLabel">Confirm Delete</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    Are you sure you want to delete this camera set point?
                </div>
                <form id="deleteCameraForm">
                    <input type="hidden" id="deleteCameraId" name="cameraId" />
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger" id="confirmDeleteCameraBtn">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</html>