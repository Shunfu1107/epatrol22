// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AdminPortalV8.Models.Epatrol;

public partial class EPatrol_DevContext : DbContext
{
    public EPatrol_DevContext(DbContextOptions<EPatrol_DevContext> options)
        : base(options)
    {
    }

    public virtual DbSet<FireDetected> FireDetecteds { get; set; }

    public virtual DbSet<CameraStatusNew> CameraStatusNews { get; set; }

    public virtual DbSet<CameraStatus> CameraStatuses { get; set; }

    public virtual DbSet<LocationCamera> LocationCameras { get; set; }

    public virtual DbSet<Aimodel> Aimodels { get; set; }

    public virtual DbSet<Camera> Cameras { get; set; }

    public virtual DbSet<CheckList> CheckLists { get; set; }

    public virtual DbSet<CheckPoint> CheckPoints { get; set; }

    public virtual DbSet<Guard> Guards { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Patrol> Patrols { get; set; }

    public virtual DbSet<PatrolType> PatrolTypes { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<Route> Routes { get; set; }

    public virtual DbSet<RouteCheckPoint> RouteCheckPoints { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<ScheduleCameraCheck> ScheduleCameraChecks { get; set; }

    public virtual DbSet<CameraHealthResult> CameraHealthResults { get; set; }

    public virtual DbSet<Video> Videos { get; set; }

    public virtual DbSet<VideoFile> VideoFiles { get; set; }
    public DbSet<Camera_CheckList> CameraCheckLists { get; set; }
    public virtual DbSet<RouteSchedule> RouteSchedules { get; set; }
    public virtual DbSet<Notification> Notifications { get; set; }
    public virtual DbSet<UserCameraSelection> UserCameraSelections { get; set; }
    public virtual DbSet<Building> Buildings { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<FireDetected>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Fire_Det__3214EC07B310205E");

            entity.ToTable("Fire_Detected");

            entity.HasOne(d => d.Camera).WithMany(p => p.FireDetecteds)
                .HasForeignKey(d => d.CameraId)
                .HasConstraintName("FK_FireDetected_Camera");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VideoPath)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<CameraStatusNew>(entity =>
        {
            entity.HasKey(e => e.CameraStatusId).HasName("PK__CameraSt__F472ACC1020F5D55");

            entity.ToTable("CameraStatusNew");

            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.NotificationMethod).HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.StatusDate).HasColumnType("datetime");

            entity.HasOne(d => d.Camera).WithMany(p => p.CameraStatusNews)
                .HasForeignKey(d => d.CameraId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CameraStatusNew_Camera");
        });

        modelBuilder.Entity<VideoFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VideoFil__3214EC0784C01A82");

            entity.Property(e => e.ContentType).HasMaxLength(50);
            entity.Property(e => e.FileName).HasMaxLength(255);
        });

        modelBuilder.Entity<Video>(entity =>
        {
            entity.HasKey(e => e.VideoId).HasName("PK__Video__E8F11E10B7D292C2");

            entity.ToTable("Video");

            entity.Property(e => e.VideoId).HasColumnName("video_id");
            entity.Property(e => e.VideoPath)
                .HasMaxLength(500)
                .HasColumnName("video_path");
        });

        //modelBuilder.Entity<CameraStatusNew>(entity =>
        //{
        //    entity.HasKey(e => e.CameraStatusId).HasName("PK__Camera_S__F472ACC1491C8A94");

        //    entity.ToTable("Camera_Status");

        //    entity.Property(e => e.Description)
        //        .HasMaxLength(255)
        //        .IsUnicode(false);
        //    entity.Property(e => e.Note)
        //        .HasMaxLength(255)
        //        .IsUnicode(false);
        //    entity.Property(e => e.Status)
        //        .HasMaxLength(50)
        //        .IsUnicode(false);
        //    entity.Property(e => e.StatusDate).HasColumnType("datetime");
        //});


        modelBuilder.Entity<LocationCamera>(entity =>
        {
            entity.HasKey(e => e.LocationCameraId)
                  .HasName("PK__Location__657B0DE3168DABFC");

            entity.ToTable("Location_Camera");

            entity.Property(e => e.LocationCameraId)
                  .HasColumnName("Location_CameraID");

            entity.Property(e => e.CreatedAt)
                  .HasDefaultValueSql("(getdate())")
                  .HasColumnType("datetime");

            entity.Property(e => e.IsActive)
                  .HasDefaultValue(true);

            entity.Property(e => e.IsAutoDetectFire)
                  .HasColumnName("isAutoDetectFire");

            entity.Property(e => e.Name)
                  .IsRequired()
                  .HasMaxLength(255);

            entity.Property(e => e.RtspUrl)
                  .IsRequired()
                  .HasColumnName("RTSP_URL");

            entity.HasOne(d => d.Location)
                  .WithMany(p => p.LocationCameras)
                  .HasForeignKey(d => d.LocationId)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_Location_Camera_Location");
        });

        modelBuilder.Entity<Aimodel>(entity =>
        {
            entity.HasKey(e => e.ModelId).HasName("PK__AIModel__E8D7A12C2F37B63D");

            entity.ToTable("AIModel");

            entity.Property(e => e.Detection)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<Camera>(entity =>
        {
            entity.HasKey(e => e.CameraId).HasName("PK__Camera__F971E0C832636AFC");

            entity.ToTable("Camera");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("URL");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("isActive");

            entity.Property(e => e.IsAutoDetectFire).HasColumnName("isAutoDetectFire");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.Property(e => e.Tailgatezone).IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("URL");

            entity.Property(e => e.CameraImage)
           .HasColumnType("varbinary(max)") // Or you can use another column type for images
           .HasColumnName("CameraImage"); // Explicit column name for the image column

            // Ensure LocationId is mapped explicitly
            entity.Property(e => e.LocationId)
                .HasColumnName("LocationId")
                .IsRequired(false);

            entity.HasOne(d => d.Location).WithMany(p => p.Cameras)
               .HasForeignKey(d => d.LocationId)
               .OnDelete(DeleteBehavior.SetNull)
               .HasConstraintName("FK_Camera_Location");

            entity.HasMany(d => d.Schedules).WithMany(p => p.Cameras)
                .UsingEntity<Dictionary<string, object>>(
                    "CameraCameraScheduleCheck",
                    r => r.HasOne<ScheduleCameraCheck>().WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CameraScheduleCheck_ScheduleCameraCheck"),
                    l => l.HasOne<Camera>().WithMany()
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CameraScheduleCheck_Camera"),
                    j =>
                    {
                        j.HasKey("CameraId", "ScheduleId");
                        j.ToTable("Camera_CameraScheduleCheck");
                    
                    }
                );

        });

        //modelBuilder.Entity<CameraStatus>(entity =>
        //{
        //    entity.HasKey(e => e.CameraStatusId).HasName("PK__CameraSt__F472ACC198151AFE");

        //    entity.ToTable("CameraStatus");

        //    entity.Property(e => e.Description).HasMaxLength(255);
        //    entity.Property(e => e.Note).HasMaxLength(255);
        //    entity.Property(e => e.Status).HasMaxLength(50);
        //    entity.Property(e => e.StatusDate).HasColumnType("datetime");
        //});

        //modelBuilder.Entity<CameraStatus>(entity =>
        //{
        //    entity.HasKey(e => e.CameraStatusId).HasName("PK__Camera_S__F472ACC1491C8A94");

        //    entity.ToTable("Camera_Status");

        //    entity.Property(e => e.Description)
        //        .HasMaxLength(255)
        //        .IsUnicode(false);
        //    entity.Property(e => e.Note)
        //        .HasMaxLength(255)
        //        .IsUnicode(false);
        //    entity.Property(e => e.NotificationMethod)
        //        .HasMaxLength(50)
        //        .IsUnicode(false);
        //    entity.Property(e => e.Status)
        //        .HasMaxLength(50)
        //        .IsUnicode(false);
        //    entity.Property(e => e.StatusDate).HasColumnType("datetime");

        //    entity.HasOne(d => d.Camera).WithMany(p => p.CameraStatuses)
        //        .HasForeignKey(d => d.CameraId)
        //        .OnDelete(DeleteBehavior.Cascade)
        //        .HasConstraintName("FK_CameraStatus_Camera");
        //});

        modelBuilder.Entity<CameraStatus>(entity =>
        {
            entity.HasKey(e => e.CameraStatusId).HasName("PK__CameraSt__F472ACC198151AFE");

            entity.ToTable("CameraStatus");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.NotificationMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("None");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.StatusDate).HasColumnType("datetime");
        });


        modelBuilder.Entity<CheckList>(entity =>
        {
            entity.HasKey(e => e.CheckListId).HasName("PK__CheckLis__56318341C1EB7173");

            entity.ToTable("CheckList");

            entity.Property(e => e.CheckListName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.CheckLists)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("FK__CheckList__Model__73501C2F");
        });

        modelBuilder.Entity<Camera_CheckList>(entity =>
        {
            entity.ToTable("Camera_CheckList"); // ✅ Ensure the table name matches the database

            entity.HasKey(e => e.CameraCheckListId)
                  .HasName("PK_CameraCheckList");

            entity.HasOne(d => d.Camera)
                  .WithMany(c => c.CameraCheckLists)
                  .HasForeignKey(d => d.CameraId)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_CameraCheckList_Camera");

            entity.HasOne(d => d.CheckList)
                  .WithMany(c => c.CameraCheckLists)
                  .HasForeignKey(d => d.CheckListId)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_CameraCheckList_CheckList");
        });

        modelBuilder.Entity<CheckPoint>(entity =>
        {
            entity.HasKey(e => e.CheckPointId).HasName("PK__CheckPoi__185C6FE6B9AD55BD");

            entity.ToTable("CheckPoint");

            entity.Property(e => e.CheckPointName)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Location).WithMany(p => p.CheckPoints)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_CheckPointLocation");

            entity.HasMany(d => d.Cameras).WithMany(p => p.CheckPoints)
                .UsingEntity<Dictionary<string, object>>(
                    "CheckPointCamera",
                    r => r.HasOne<Camera>().WithMany()
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__CheckPoin__Camer__038683F8"),
                    l => l.HasOne<CheckPoint>().WithMany()
                        .HasForeignKey("CheckPointId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__CheckPoin__Check__02925FBF"),
                    j =>
                    {
                        j.HasKey("CheckPointId", "CameraId").HasName("PK__CheckPoi__87CB71EA0AB1B56D");
                        j.ToTable("CheckPoint_Camera");
                    });

            entity.HasMany(d => d.CheckLists).WithMany(p => p.CheckPoints)
                .UsingEntity<Dictionary<string, object>>(
                    "CheckPointCheckList",
                    r => r.HasOne<CheckList>().WithMany()
                        .HasForeignKey("CheckListId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__CheckPoin__Check__075714DC"),
                    l => l.HasOne<CheckPoint>().WithMany()
                        .HasForeignKey("CheckPointId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__CheckPoin__Check__0662F0A3"),
                    j =>
                    {
                        j.HasKey("CheckPointId", "CheckListId").HasName("PK__CheckPoi__1D3F77D2F54A12A8");
                        j.ToTable("CheckPoint_CheckList");
                    });
        });

        modelBuilder.Entity<Guard>(entity =>
        {
            entity.HasKey(e => e.GuardId).HasName("PK__Guard__803F90F542A0A434");

            entity.ToTable("Guard");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.LocationId).HasName("PK__Location__E7FEA497D8C43CA8");

            entity.ToTable("Location");

            entity.Property(e => e.Level).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
        });

        modelBuilder.Entity<Patrol>(entity =>
        {
            entity.HasKey(e => e.PatrolId).HasName("PK__Patrol__15509D88E9BE0021");

            entity.ToTable("Patrol");

            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);

            //entity.HasOne(d => d.Guard).WithMany(p => p.Patrols)
            //    .HasForeignKey(d => d.GuardId)
            //    .HasConstraintName("FK_PatrolGuard");

            entity.HasOne(d => d.Route).WithMany(p => p.Patrols)
                .HasForeignKey(d => d.RouteId)
                .HasConstraintName("FK__Patrol__RouteId__7CD98669");
            //new
            entity.Property(e => e.Status)
              .HasMaxLength(50)
              .IsUnicode(false);
            entity.Property(e => e.VideoLink).HasColumnName("video_link");

        });

        modelBuilder.Entity<PatrolType>(entity =>
        {
            entity.HasKey(e => e.PatrolTypeId).HasName("PK__PatrolTy__51B85F683DFA5205");

            entity.ToTable("PatrolType");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__Report__D5BD48051DA89B60");

            entity.ToTable("Report");

            entity.HasOne(d => d.Patrol).WithMany(p => p.Reports)
                .HasForeignKey(d => d.PatrolId)
                .HasConstraintName("FK__Report__PatrolId__7FB5F314");
        });

        modelBuilder.Entity<Route>(entity =>
        {
            entity.HasKey(e => e.RouteId).HasName("PK__Route__80979B4DE556DF14");

            entity.ToTable("Route");

            entity.Property(e => e.RouteName)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.CheckPoint).WithMany(p => p.Routes)
                .HasForeignKey(d => d.CheckPointId)
                .HasConstraintName("FK__Route__CheckPoin__7814D14C");

            entity.HasOne(d => d.PatrolType).WithMany(p => p.Routes)
                .HasForeignKey(d => d.PatrolTypeId)
                .HasConstraintName("FK__Route__PatrolTyp__79FD19BE");

            entity.HasOne(d => d.Schedule).WithMany(p => p.Routes)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("FK__Route__ScheduleI__7908F585");
        });

        modelBuilder.Entity<RouteCheckPoint>(entity =>
        {
            entity.HasKey(e => new { e.RouteId, e.CheckPointId }).HasName("PK__Route_Ch__F1125DB3D024B649");

            entity.ToTable("Route_CheckPoint");

            entity.HasOne(d => d.CheckPoint).WithMany(p => p.RouteCheckPoints)
                .HasForeignKey(d => d.CheckPointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Route_Che__Check__0EF836A4");

            entity.HasOne(d => d.Route).WithMany(p => p.RouteCheckPoints)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Route_Che__Route__0E04126B");
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK__Schedule__9C8A5B49304D40F9");

            entity.ToTable("Schedule");

            entity.Property(e => e.Day)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RouteSchedule>(entity =>
        {
            entity.HasKey(e => new { e.RouteId, e.ScheduleId }) // Composite Primary Key
                  .HasName("PK__Route_Sc__095F3EF93FB8A95C");

            entity.ToTable("Route_Schedule"); // ✅ Ensure it maps to the correct database table

            entity.HasOne(d => d.Route)
                  .WithMany(p => p.RouteSchedules)
                  .HasForeignKey(d => d.RouteId)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK__Route_Sch__Route__0A338187");

            entity.HasOne(d => d.Schedule)
                  .WithMany(p => p.RouteSchedules)
                  .HasForeignKey(d => d.ScheduleId)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK__Route_Sch__Sched__0B27A5C0");
        });

        modelBuilder.Entity<ScheduleCameraCheck>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK__Schedule__9C8A5B49A0E5237E");

            entity.ToTable("ScheduleCameraCheck");

            entity.Property(e => e.Day)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ScheduleName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__3214EC07327C8D68");

            entity.Property(e => e.Device).HasMaxLength(255);
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.Type).HasMaxLength(100);
        });

        modelBuilder.Entity<UserCameraSelection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UserCame__3214EC0770FC4EB2");

            entity.ToTable("UserCameraSelection");

            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Building>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Building__3214EC0782546DB1");

            entity.ToTable("Building");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImageName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}